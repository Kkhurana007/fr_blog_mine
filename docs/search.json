[
  {
    "objectID": "about-fr.html",
    "href": "about-fr.html",
    "title": "Kunal Khurana",
    "section": "",
    "text": "English  Fran√ßais"
  },
  {
    "objectID": "about-fr.html#education",
    "href": "about-fr.html#education",
    "title": "Kunal Khurana",
    "section": "üìùEducation",
    "text": "üìùEducation\n2022| G√âNIE ET SCIENCE APPLIQU√âES| C√âGEP DU VIEUX MONTR√âAL, CA\n2021| FRANCISATION ET IN√âGRATION AU MILIEU QU√âB√âCOIS| UNIVERSIT√â LAVAL, CA\n2016| Maitrise en Science du Sol| PUNJAB AGRICULTURAL UNIVERSITY, IN\n2013| Baccelaureat en Agriculture | PUNJABI UNIVERSITY PATIALA, IN"
  },
  {
    "objectID": "about-fr.html#exp√©rience-du-travail",
    "href": "about-fr.html#exp√©rience-du-travail",
    "title": "Kunal Khurana",
    "section": "üßë‚Äçüíº Exp√©rience du travail",
    "text": "üßë‚Äçüíº Exp√©rience du travail\nSeptember 2022 ‚Äì March 2023| Assistant de recherche, McGill University\nSEPTEMBER 2020 ‚Äì NOVEMBER 2020| Traductor, CERDA\nJanuary 2019 ‚Äì August 2019| Assistant de recherche, Universit√© Laval\nOctober 2016 ‚Äì March 2017| Assistant de recherche, PUNJAB AGRICULTURAL UNIVERSITY"
  },
  {
    "objectID": "about-fr.html#contacer",
    "href": "about-fr.html#contacer",
    "title": "Kunal Khurana",
    "section": "Contacer!",
    "text": "Contacer!\nL‚Äôune de mes plus grandes motivations pour cr√©er du contenu en ligne est de communiquer avec des personnes fascinantes du monde entier. Si vous souhaitez en discuter, n‚Äôh√©sitez pas √† m‚Äô√©crire. Je serais content d‚Äôavoir de vos nouvelles!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Kunal Khurana",
    "section": "",
    "text": "English  Fran√ßais"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Kunal Khurana",
    "section": "üìùEducation",
    "text": "üìùEducation\n2022| G√âNIE ET SCIENCE APPLIQU√âES| C√©gep du Vieux Montr√©al, CA\n2021| FRANCISATION ET IN√âGRATION AU MILIEU QU√âB√âCOIS| Universit√© Laval, CA\n2016| MASTER‚ÄôS IN SOIL SCIENCE| Punjab Agricultural University, IN\n2013| BACHELOR‚ÄôS IN AGRICULTURE| Punjabi University patiala, IN"
  },
  {
    "objectID": "about.html#work-experience",
    "href": "about.html#work-experience",
    "title": "Kunal Khurana",
    "section": "üßë‚Äçüíº Work Experience",
    "text": "üßë‚Äçüíº Work Experience\nSeptember 2022 ‚Äì March 2023| Resesarch Assistant, McGill University\nSEPTEMBER 2020 ‚Äì NOVEMBER 2020| FREELANCE TRANSLATOR, CERDA\nJanuary 2019 ‚Äì August 2019| Resesarch Assistant, Universit√© Laval\nOctober 2016 ‚Äì March 2017| Resesarch Assistant, Punjab Agriclutural University"
  },
  {
    "objectID": "about.html#lets-connect",
    "href": "about.html#lets-connect",
    "title": "Kunal Khurana",
    "section": "Let‚Äôs Connect!",
    "text": "Let‚Äôs Connect!\nOne of my greatest motivations for creating online content is to engage with fascinating individuals from all over the world. If you‚Äôre interested in having a chat, feel free to reach out to me. I would love to hear from you!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kunal Khurana",
    "section": "",
    "text": "Data Analysis\n\n\n32 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\nLino Galiana\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n10 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\n\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Analysis\n\n\n9 min\n\n\n\nNumpy\n\n\nData Analysis\n\n\n\n\nJustin Johnson, Volodymr Kuleshov, and Issac Caswell\n\n\nJun 5, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Analysis\n\n\n0 min\n\n\n\nMatplotlib\n\n\nData Analysis\n\n\n\n\nKeith Galli\n\n\nJun 4, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Analysis\n\n\n20 min\n\n\n\nPandas\n\n\nData Analysis\n\n\n\n\n\n\n\nJun 4, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\n0 min\n\n\n\npackages\n\n\ndata\n\n\n\n\n\n\n\nMay 22, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\n0 min\n\n\n\nplot\n\n\ndata\n\n\n\n\n\n\n\nMay 20, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Visualization\n\n\n6 min\n\n\n\nNumpy\n\n\nPandas\n\n\nData Analysis\n\n\n\n\nNonu Singh\n\n\nMay 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nAI\n\n\nIrrigation\n\n\nMachine learning\n\n\n\n\nKunal Khurana\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nC\n\n\nBamboo\n\n\n\n\nKunal Khurana\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nMachine learning\n\n\nAI\n\n\nIrrigation\n\n\n\n\nKunal Khurana\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nMachine learning\n\n\nSoil Analysis\n\n\nYield prediction\n\n\n\n\nKunal Khurana\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nMachine learning\n\n\nIrrigation\n\n\nModelling\n\n\n\n\nKunal Khurana\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nDigitalization\n\n\nMachine learning\n\n\nAI\n\n\n\n\nKunal Khurana\n\n\nApr 17, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n See all posts in English"
  },
  {
    "objectID": "index.html#posts-en-fran√ßais",
    "href": "index.html#posts-en-fran√ßais",
    "title": "Kunal Khurana",
    "section": "Posts en fran√ßais",
    "text": "Posts en fran√ßais\n\n\n\n\n\n\n\n\n\n\nTools - Git\n\n\nData Analysis\n\n\n10 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\n\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTools - Git-2\n\n\nData Analysis\n\n\n32 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\nLino Galiana\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n Voir les posts en fran√ßais"
  },
  {
    "objectID": "posts/Ai_watersaving/index.html",
    "href": "posts/Ai_watersaving/index.html",
    "title": "How helpful can AI be in solving the water crisis?",
    "section": "",
    "text": "Wasting water, especially in areas in which it is a scarce resource, is a huge headache (and expense) for farmers and food growers worldwide. This article discusses how AI can help improve water irrigation in agriculture. The article notes that agriculture accounts for approximately 70% of global freshwater usage and that water scarcity is becoming an increasingly pressing issue in many parts of the world. By using AI, farmers can optimize their irrigation practices resulting in reduced water consumption but increased crop yields. The article highlights the use of Machine learning, and in particular deep-learning, algorithms to collect and interpret data from images and identify patterns that spotlight irrigation issues. AI can also be used to create predictive models that help farmers anticipate (real-time) crop water needs to identify areas of a field that need more or less water. By using AI in agriculture, farmers can become more efficient and sustainable in their use of water, ultimately helping to address global water scarcity concerns."
  },
  {
    "objectID": "posts/bamboo_plantation/index.html",
    "href": "posts/bamboo_plantation/index.html",
    "title": "Can bamboo help to solve climate crisis?",
    "section": "",
    "text": "The article discusses how bamboo construction can be a sustainable and affordable solution to housing while also helping mitigate climate change. Bamboo is a fast-growing, renewable resource that can be used to build structurally sound buildings that are earthquake-resistant and can withstand extreme weather conditions. Bamboo also has a lower carbon footprint compared to traditional building materials like concrete and steel. The article highlights several examples of successful bamboo construction projects, including a 22-story bamboo skyscraper in Colombia and a village in China where all the houses are made of bamboo. By using bamboo in construction, we can create more eco-friendly and affordable housing options while also reducing carbon emissions."
  },
  {
    "objectID": "posts/Digitalization_of_agricluture/index.html",
    "href": "posts/Digitalization_of_agricluture/index.html",
    "title": "Digitaliztion of Agriculture",
    "section": "",
    "text": "While also introducing new techniques to increase crop yields and reduce the impact of climate change and with the use of precision agriculture, remote sensing technologies, and data analysis, these communities are working to improve soil health, increase biodiversity, and foster sustainable practices. The article highlights several Indigenous-led initiatives, such as the One House, Many Nations project and the Whitecap Dakota First Nation‚Äôs Regenerative Farming Program, which are helping to promote food sovereignty and economic development in the region. Additionally, these initiatives are providing opportunities for Indigenous youth to learn about their cultural heritage and connect with the land."
  },
  {
    "objectID": "posts/en.html",
    "href": "posts/en.html",
    "title": "Posts in English",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n32 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\nLino Galiana\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n10 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\n\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Analysis\n\n\n9 min\n\n\n\nNumpy\n\n\nData Analysis\n\n\n\n\nJustin Johnson, Volodymr Kuleshov, and Issac Caswell\n\n\nJun 5, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Analysis\n\n\n0 min\n\n\n\nMatplotlib\n\n\nData Analysis\n\n\n\n\nKeith Galli\n\n\nJun 4, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Analysis\n\n\n20 min\n\n\n\nPandas\n\n\nData Analysis\n\n\n\n\n\n\n\nJun 4, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\n0 min\n\n\n\npackages\n\n\ndata\n\n\n\n\n\n\n\nMay 22, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\n0 min\n\n\n\nplot\n\n\ndata\n\n\n\n\n\n\n\nMay 20, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\n\nData Visualization\n\n\n6 min\n\n\n\nNumpy\n\n\nPandas\n\n\nData Analysis\n\n\n\n\nNonu Singh\n\n\nMay 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nAI\n\n\nIrrigation\n\n\nMachine learning\n\n\n\n\nKunal Khurana\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nC\n\n\nBamboo\n\n\n\n\nKunal Khurana\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nMachine learning\n\n\nAI\n\n\nIrrigation\n\n\n\n\nKunal Khurana\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nMachine learning\n\n\nSoil Analysis\n\n\nYield prediction\n\n\n\n\nKunal Khurana\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nMachine learning\n\n\nIrrigation\n\n\nModelling\n\n\n\n\nKunal Khurana\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\n\nDigitalization\n\n\nMachine learning\n\n\nAI\n\n\n\n\nKunal Khurana\n\n\nApr 17, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/fr.html",
    "href": "posts/fr.html",
    "title": "Posts en fran√ßais",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n10 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\n\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n32 min\n\n\n\nGit\n\n\nData Analysis\n\n\n\n\nLino Galiana\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/git/introgit.html",
    "href": "posts/git/introgit.html",
    "title": "Tools - Git",
    "section": "",
    "text": "Cette page reprend des √©l√©ments pr√©sents dans un cours d√©di√© fait avec Romain Avouac"
  },
  {
    "objectID": "posts/git/introgit.html#conserver-et-archiver-du-code",
    "href": "posts/git/introgit.html#conserver-et-archiver-du-code",
    "title": "Tools - Git",
    "section": "Conserver et archiver du code",
    "text": "Conserver et archiver du code\nUne des principales fonctionnalit√©s de la gestion de version est de conserver l‚Äôensemble des fichiers de fa√ßon s√©curis√©e et de proposer un archivage structur√© des codes. Les fichiers sont stock√©s dans un d√©p√¥t, qui constitue le projet.\nTout repose dans la gestion et la pr√©sentation de l‚Äôhistorique des modifications. Chaque modification (ajout, suppression ou changement) sur un ou plusieurs fichiers est identifi√©e par son auteur, sa date et un bref descriptif[1]. Chaque changement est donc unique et ais√©ment identifiable quand les modifications sont class√©es par ordre chronologique. Les groupes de modifications transmis au d√©p√¥t sont appel√©es commit.\n1. [^](#cite_ref-1)\nPlus pr√©cis√©ment, chaque modification est identifi√©e de mani√®re unique par un code SHA auquel est associ√© l‚Äôauteur, l‚Äôhorodatage et des m√©tadonn√©es (par exemple le message descriptif associ√©).\nAvec des outils graphiques, on peut v√©rifier l‚Äô ensemble des √©volutions d‚Äôun fichier (history), ou l‚Äôhistoire d‚Äôun d√©p√¥t. On peut aussi se concentrer sur une modification particuli√®re d‚Äôun fichier ou v√©rifier, pour un fichier, la modification qui a entra√Æn√© l‚Äôapparition de telle ou telle ligne (blame)\nSur son poste de travail, les dizaines (voire centaines) de programmes organis√©s √† la main n‚Äôexistent plus. Tout est regroup√© dans un seul dossier, rassemblant les √©l√©ments du d√©p√¥t. Au sein du d√©p√¥t, tout l‚Äôhistorique est stock√© et accessible rapidement. Si on souhaite travailler sur la derni√®re version des programmes (ou sur une ancienne version sp√©cifique), il n‚Äôy a plus besoin de conserver les autres fichiers car ils sont dans l‚Äôhistorique du projet. Il est alors possible de choisir sur quelle version on veut travailler (la derni√®re commune √† tout le monde, la sienne en train d‚Äô√™tre d√©velopp√©e, celle de l‚Äôann√©e derni√®re, etc.)."
  },
  {
    "objectID": "posts/git/introgit.html#travailler-efficacement-en-√©quipe",
    "href": "posts/git/introgit.html#travailler-efficacement-en-√©quipe",
    "title": "Tools - Git",
    "section": "Travailler efficacement en √©quipe",
    "text": "Travailler efficacement en √©quipe\nLe deuxi√®me avantage de la gestion de version repr√©sente une am√©lioration notable du travail en √©quipe sur des codes en commun.\nLa gestion de version permet de collaborer simplement et avec m√©thode. De fa√ßon organis√©e, elle permet de:\n\ntravailler en parall√®le et fusionner facilement du code\npartager une documentation des programmes gr√¢ce :\n\naux commentaires des modifications\n√† la possibilit√© d‚Äôune documentation commune et collaborative\n\ntrouver rapidement des erreurs et en diffuser rapidement la correction\n\nA ces avantages s‚Äôajoutent les fonctionalit√©s collaboratives des forges qui sont des plateformes o√π peuvent √™tre stock√©s des d√©p√¥ts. N√©anmoins, ces forges proposent aujourd‚Äôhui beaucoup de fonctionalit√©s qui vont au-del√† de l‚Äôarchivage de code: int√©ragir via des issues, faire des suggestions de modifications, ex√©cuter du code dans des environnements normalis√©s, etc. Il faut vraiment les voir comme des r√©seaux sociaux du code. Les principales plateformes dans ce domaine √©tant Github et Gitlab.\nL‚Äôusage individuel, c‚Äôest-√†-dire seul sur son projet, permet aussi de ‚Äútravailler en √©quipe avec soi-m√™me‚Äù car il permet de retrouver des mois plus tard le contenu et le contexte des modifications. Cela est notamment pr√©cieux lors des changements de poste ou des travaux r√©guliers mais espac√©s dans le temps (par exemple, un mois par an chaque ann√©e). M√™me lorsqu‚Äôon travaille tout seul, on collabore avec un moi futur qui peut ne plus se souvenir de la modification des fichiers."
  },
  {
    "objectID": "posts/git/introgit.html#am√©liorer-la-qualit√©-des-codes",
    "href": "posts/git/introgit.html#am√©liorer-la-qualit√©-des-codes",
    "title": "Tools - Git",
    "section": "Am√©liorer la qualit√© des codes",
    "text": "Am√©liorer la qualit√© des codes\nLe fonctionnement de la gestion de version, reposant sur l‚Äôarchivage structur√© des modifications et les commentaires les accompagnant, renforce la qualit√© des programmes informatiques. Ils sont plus document√©s, plus riches et mieux structur√©s. C‚Äôest pour cette raison que le contr√¥le de version ne doit pas √™tre consid√©r√© comme un outil r√©serv√© √† des d√©veloppeurs : toute personne travaillant sur des programmes informatiques, gagne √† utiliser du contr√¥le de version.\nLes services d‚Äôint√©gration continue permettent de faire des tests automatiques de programmes informatiques, notamment de packages, qui renforcent la replicabilit√© des programmes. Mettre en place des m√©thodes de travail fond√©es sur l‚Äôint√©gration continue rend les programmes plus robustes en for√ßant ceux-ci √† tourner sur des machines autres que celles du d√©veloppeur du code."
  },
  {
    "objectID": "posts/git/introgit.html#simplifier-la-communication-autour-dun-projet",
    "href": "posts/git/introgit.html#simplifier-la-communication-autour-dun-projet",
    "title": "Tools - Git",
    "section": "Simplifier la communication autour d‚Äôun projet",
    "text": "Simplifier la communication autour d‚Äôun projet\nLes sites de d√©p√¥ts Github et Gitlab permettent de faire beaucoup plus que seulement archiver des codes. Les fonctionalit√©s de d√©ploiement en continu permettent ainsi de :\n\ncr√©er des sites web pour valoriser des projets (par exemple les sites readthedocs en python)\nd√©ployer de la documentation en continu\nrendre visible la qualit√© d‚Äôun projet avec des services de code coverage, de tests automatiques ou d‚Äôenvironnements int√©gr√©s de travail (binder, etc.) qu‚Äôon rend g√©n√©ralement visible au moyen de badges (exemple ici )"
  },
  {
    "objectID": "posts/git/introgit.html#copies-de-travail-et-d√©p√¥t-collectif",
    "href": "posts/git/introgit.html#copies-de-travail-et-d√©p√¥t-collectif",
    "title": "Tools - Git",
    "section": "Copies de travail et d√©p√¥t collectif",
    "text": "Copies de travail et d√©p√¥t collectif\nGit est un syst√®me d√©centralis√© et asynchrone de gestion de version. Cela signifie que:\n\nChaque membre d‚Äôun projet travail sur une copie locale du d√©p√¥t (syst√®me decentralis√©). Cette copie de travail s‚Äôappelle un clone. Cela signifie qu‚Äôon n‚Äôa pas une coh√©rence en continue de notre version de travail avec le d√©p√¥t ; on peut tr√®s bien ne jamais vouloir les mettre en coh√©rence (par exemple, si on teste une piste qui s‚Äôav√®re infructueuse) ;\nC‚Äôest lorsqu‚Äôon propose la publication de modifications sur le d√©p√¥t collectif qu‚Äôon doit s‚Äôassurer de la coh√©rence avec la version disponible en ligne (syst√®me asynchrone).\n\nLe d√©p√¥t distant est g√©n√©ralement stock√© sur une forge logicielle (Github ou Gitlab) et sert √† centraliser la version collective d‚Äôun projet. Les copies locales sont des copies de travail qu‚Äôon utilise pour faire √©voluer un projet:\n\nIl est tout √† fait possible de faire du contr√¥le de version sans mettre en place de d√©p√¥t distant. Cependant,\n\nc‚Äôest dangereux puisque le d√©p√¥t distant fait office de sauvegarde d‚Äôun projet. Sans d√©p√¥t distant, on peut tout perdre en cas de probl√®me sur la copie locale de travail ;\nc‚Äôest d√©sirer √™tre moins efficace car, comme nous allons le montrer, les fonctionalit√©s des plateformes Github et Gitlab sont √©galement tr√®s b√©n√©fiques lorsqu‚Äôon travaille tout seul."
  },
  {
    "objectID": "posts/git/introgit.html#principe",
    "href": "posts/git/introgit.html#principe",
    "title": "Tools - Git",
    "section": "Principe",
    "text": "Principe\nLes trois manipulations les plus courantes sont les suivantes et repr√©sent√©es sur le diagramme ci-apr√®s :\n\ncommit : je valide les modifications que j‚Äôai faites en local avec un message qui les expliquent\npull : je r√©cup√®re la derni√®re version des codes du d√©p√¥t distant\npush : je transmets mes modifications valid√©es au d√©p√¥t distant\n\n\nLes deux derni√®res manipulations correspondent aux interactions (notamment la mise en coh√©rence) avec le d√©p√¥t commun alors que la premi√®re manipulation commit correspond √† la modification des fichiers faite pour faire √©voluer un projet.\nDe mani√®re plus pr√©cise, il y a trois √©tapes avant d‚Äôenvoyer les modifications valid√©es (commit) au d√©p√¥t. Elles se d√©finissent en fonction des commandes qui permet de les appliquer quand Git est utilis√© en ligne de commandes :\n\ndiff : inspection des modifications. Cela permet de comparer les fichiers modifi√©s et de distinguer les fichiers ajout√©s ou supprim√©s\nstaging area : s√©lection des modifications.\ncommit : validation des modifications s√©lectionn√©es (avec commentaire).\n\n\nLors des √©tapes de push et pull, des conflits peuvent appara√Ætre, par exemple lorsque deux personnes ont modifi√© le m√™me programme simultan√©ment. Le terme conflit peut faire peur mais en fait c‚Äôest l‚Äôun des apports principaux de Git que de faciliter √©norm√©ment la gestion de versions diff√©rentes. Les exercices du chapitre suivant l‚Äôillustreront."
  },
  {
    "objectID": "posts/git/introgit.html#les-branches",
    "href": "posts/git/introgit.html#les-branches",
    "title": "Tools - Git",
    "section": "Les branches",
    "text": "Les branches\nC‚Äôest une des fonctionnalit√©s les plus pratiques de la gestion de version. La cr√©ation de branches dans un projet (qui devient ainsi un arbre) permet de d√©velopper en parall√®le des correctifs ou une nouvelle fonctionnalit√© sans modifier le d√©p√¥t commun.\nCela permet de s√©parer le nouveau d√©veloppement et de faire cohabiter plusieurs versions, pouvant √©voluer s√©par√©ment ou pouvant √™tre facilement rassembl√©es. Git est optimis√© pour le travail sur les branches.\nDans un projet collaboratif, une branche dite master joue le r√¥le du tronc. C‚Äôest autour d‚Äôelle que vont pousser ou se greffer les branches. L‚Äôun des avantages de Git est qu‚Äôon peut toujours revenir en arri√®re. Ce filet de s√©curit√© permet d‚Äôoser des exp√©rimentations, y compris au sein d‚Äôune branche. Il faut √™tre pr√™t √† aller dans la ligne de commande pour cela mais c‚Äôest extr√™mement confortable.\n\nComment nommer les branches ? L√† encore, il y a √©norm√©ment de conventions diff√©rentes. Une fr√©quemment observ√©e est :\n\npour les nouvelles fonctionnalit√©s : feature/nouvelle-fonctionnalite o√π nouvelle-fontionnalite est un nom court r√©sumant la fonctionnalit√©\npour les corrections de bug : issue-num o√π num est le num√©ro de l‚Äôissue\n\nN‚Äôh√©sitez pas √† aller encore plus loin dans la normalisation !"
  },
  {
    "objectID": "posts/git-2/exogit.html",
    "href": "posts/git-2/exogit.html",
    "title": "Tools - Git-2",
    "section": "",
    "text": "Les exercices suivants sont inspir√©s d‚Äôun cours de Git que j‚Äôai construit √† l‚ÄôInsee et dont les ressources sont disponibles ici. L‚Äôid√©e du cadavre exquis, qui m‚Äôa √©t√© inspir√©e par Romain Lesur est inspir√©e de cette ressource et de celle-ci.\nCette partie part du principe que les concepts g√©n√©raux de Git sont ma√Ætris√©s et qu‚Äôun environnement de travail fonctionnel avec Git est disponible. Un exemple de tel environnement est leJupyterLab du SSPCloud o√π une extension Git est pr√©-install√©e:\n\nOutre le chapitre pr√©c√©dent, il existe de nombreuses ressources sur internet sur le sujet. Parmi-celles auquel j‚Äôai contribu√©, vous pourrez trouver un cours de Git orient√© gestion de projet, une version plus l√©g√®re √† partir de slides et des ressources de la documentation collaborative sur R qu‚Äôest utilitR (des √©l√©ments sur la configuration et pratique sur RStudio). Toutes les ressources ne sont donc pas du Python car Git est un outil tranversal qui doit servir quelque soit le langage de pr√©dilection.\nL‚Äôid√©e de ce chapitre est d‚Äôamener, progressivement, √† la mise en oeuvre de pratiques collaboratives devenues standards dans le domaine de l‚Äôopen-source mais √©galement de plus en plus communes dans les administrations et entreprises de la data-science.\nCe chapitre propose d‚Äôutiliser l‚Äôextension Git de JupyterLab. Un tutoriel pr√©sentant cette extension est disponible ici. Les principaux IDE disponibles (Visual Studio, PyCharm, RStudio) pr√©sentent des fonctionalit√©s similaires. Il est tout √† fait possible d‚Äôen utiliser un autre. VisualStudio propose probablement, √† l‚Äôheure actuelle, l‚Äôensemble le plus complet.\nCertains passages de ce TD n√©cessitent d‚Äôutiliser la ligne de commande. Il est tout √† fait possible de r√©aliser ce TD enti√®rement avec celle-ci. Cependant, pour une personne d√©butante en Git, l‚Äôutilisation d‚Äôune interface graphique peut constituer un √©l√©ment important pour la compr√©hension et l‚Äôadoption de Git. Une fois √† l‚Äôaise avec Git, on peut tout √† fait se passer des interfaces graphiques pour les routines quotidiennes et ne les utiliser que pour certaines op√©rations o√π elles s‚Äôav√®rent fort pratiques (notamment la comparaison de deux fichiers avant de devoir fusionner)."
  },
  {
    "objectID": "posts/git-2/exogit.html#rappels-sur-la-notion-de-d√©p√¥t-distant",
    "href": "posts/git-2/exogit.html#rappels-sur-la-notion-de-d√©p√¥t-distant",
    "title": "Tools - Git-2",
    "section": "Rappels sur la notion de d√©p√¥t distant",
    "text": "Rappels sur la notion de d√©p√¥t distant\nPour rappel, comme expliqu√© pr√©c√©demment, il convient de distinguer le d√©p√¥t distant (remote) et la copie ou les copies locales (les clones) d‚Äôun d√©p√¥t. Le d√©p√¥t distant est g√©n√©ralement stock√© sur une forge logicielle (Github ou Gitlab) et sert √† centraliser la version collective d‚Äôun projet. Les copies locales sont des copies de travail qu‚Äôon utilise pour faire √©voluer un projet:\n\nGit est un syst√®me de contr√¥le de version asynchrone c‚Äôest-√†-dire qu‚Äôon n‚Äôinteragit pas en continu avec le d√©p√¥t distant (comme c‚Äôest le cas dans le syst√®me SVN) mais qu‚Äôil est possible d‚Äôavoir une version locale qui se diff√©rencie du d√©p√¥t commun et qu‚Äôon rend coh√©rente de temps en temps.\nBien qu‚Äôil soit possible d‚Äôavoir une utilisation hors-ligne de Git, c‚Äôest-√†-dire un pur contr√¥le de version local sans d√©p√¥t distant, cela est une utilisation rare et qui comporte un int√©r√™t limite. L‚Äôint√©r√™t de Git est d‚Äôoffrir une mani√®re robuste et efficace d‚Äôinteragir avec un d√©p√¥t distant facilitant ainsi la collaboration en √©quipe ou en solitaire.\nPour ces exercices, je propose d‚Äôutiliser Github dont les fonctionalit√©s nous suffiront amplement[1]. Si, dans le futur, les fonctionnalit√©s ne vous conviennent pas (sans l‚Äôapport de fonctionnalit√©s externes, Github propose moins de fonctionalit√©s que Gitlab) ou si vous √™tes mal √† l‚Äôaise concernant le possesseur de Github (Microsoft), vous pourrez utiliser Gitlab , son concurrent. L‚Äôavantage de Github par rapport √† Gitlab est que le premier est plus visible, car mieux index√© par Google et concentre, en partie pour des raisons historiques, plus de d√©veloppeurs Python et R (ce qui est important dans des domaines comme le code o√π les externalit√©s de r√©seau jouent). Le d√©bat Github vs Gitlab n‚Äôa plus beaucoup de sens aujourd‚Äôhui car les fonctionnalit√©s ont converg√© (Github a rattrap√© une partie de son retard sur l‚Äôint√©gration continue) et, de toute mani√®re, on peut tout √† fait connecter des d√©p√¥ts Gitlab et Github.\n1. [^](#cite_ref-1)\nDans sa version en ligne, Github (https://github.com) dispose de plus de visibilit√© que Gitlab (https://gitlab.com). L‚Äôavantage que comportait Gitlab par rapport √† Github √† une √©poque, √† savoir la possibilit√© de disposer gratuitement de ressources pour faire de l‚Äôint√©gration continue, n‚Äôexiste plus depuis que Github a lanc√© son service Github Actions. Cependant, √™tre familiaris√© √† l‚Äôenvironnement Gitlab reste utile car beaucoup de forges logicielles internes reposent sur les fonctionalit√©s open-source (l‚Äôinterface graphique en faisant parti) de Gitlab. Il est donc fort utile de ma√Ætriser les fonctionalit√©s coeur de ces deux interfaces qui sont en fait quasi-identiques."
  },
  {
    "objectID": "posts/git-2/exogit.html#premi√®re-√©tape-cr√©er-un-compte-github",
    "href": "posts/git-2/exogit.html#premi√®re-√©tape-cr√©er-un-compte-github",
    "title": "Tools - Git-2",
    "section": "Premi√®re √©tape: cr√©er un compte Github",
    "text": "Premi√®re √©tape: cr√©er un compte Github\nLes deux premi√®res √©tapes se font sur Github.\n\nExercice 1 : Cr√©er un compte Github\n\nSi vous n‚Äôen avez pas d√©j√† un, cr√©er un compte sur https://github.com\nCr√©er un d√©p√¥t vide. Cr√©ez ce d√©p√¥t priv√©, cela permettra dans l‚Äôexercice 2 d‚Äôactiver notre jeton. Vous pourrez le rendre public apr√®s l‚Äôexercice 2, c‚Äôest comme vous le souhaitez."
  },
  {
    "objectID": "posts/git-2/exogit.html#deuxi√®me-√©tape-cr√©er-un-token-jeton-https",
    "href": "posts/git-2/exogit.html#deuxi√®me-√©tape-cr√©er-un-token-jeton-https",
    "title": "Tools - Git-2",
    "section": "Deuxi√®me √©tape: cr√©er un token (jeton) HTTPS",
    "text": "Deuxi√®me √©tape: cr√©er un token (jeton) HTTPS"
  },
  {
    "objectID": "posts/git-2/exogit.html#principe",
    "href": "posts/git-2/exogit.html#principe",
    "title": "Tools - Git-2",
    "section": "Principe",
    "text": "Principe\nGit est un syst√®me d√©centralis√© de contr√¥le de version : les codes sont modifi√©s par chaque personne sur son poste de travail, puis sont mis en conformit√© avec la version collective disponible sur le d√©p√¥t distant au moment o√π le contributeur le d√©cide.\nIl est donc n√©cessaire que la forge connaisse l‚Äôidentit√© de chacun des contributeurs, afin de d√©terminer qui est l‚Äôauteur d‚Äôune modification apport√©e aux codes stock√©s dans le d√©p√¥t distant. Pour que Github reconnaisse un utilisateur proposant des modifications, il est n√©cessaire de s‚Äôauthentifier (un d√©p√¥t distant, m√™me public, ne peut pas √™tre modifi√© par n‚Äôimporte qui). L‚Äôauthentification consiste ainsi √† fournir un √©l√©ment que seul vous et la forge sont cens√©s conna√Ætre : un mot de passe, une cl√© compliqu√©e, un jeton d‚Äôacc√®s‚Ä¶\nPlus pr√©cis√©ment, il existe deux modalit√©s pour faire conna√Ætre son identit√© √† Github :\n\nune authentification HTTPS (d√©crite ici) : l‚Äôauthentification se fait avec un login et un mot de passe (qu‚Äôil faut renseigner √† chaque interaction avec le d√©p√¥t), ou avec un token (m√©thode √† privil√©gier).\nune authentification SSH : l‚Äôauthentification se fait par une cl√© crypt√©e disponible sur le poste de travail et que GitHub ou GitLab conna√Æt. Une fois configur√©e, cette m√©thode ne n√©cessite plus de faire conna√Ætre son identit√© : l‚Äôempreinte digitale que constitue la cl√© suffit √† reconna√Ætre un utilisateur.\n\nLa documentation collaborative utilitR pr√©sente les raisons pour lesquelles il convient de favoriser la m√©thode HTTPS sur la m√©thode SSH.\nDepuis ao√ªt 2021, Github n‚Äôautorise plus l‚Äôauthentification par mot de passe lorsqu‚Äôon interagit (pull/push) avec un d√©p√¥t distant (raisons ici). Il est n√©cessaire d‚Äôutiliser un token (jeton d‚Äôacc√®s) qui pr√©sente l‚Äôavantage d‚Äô√™tre r√©voquable (on peut √† tout moment supprimer un jeton si, par exemple, on suspecte qu‚Äôil a √©t√© diffus√© par erreur) et √† droits limit√©s (le jeton permet certaines op√©rations standards mais n‚Äôautorise pas certaines op√©rations d√©terminantes comme la suppression d‚Äôun d√©p√¥t).\n\nIl est important de ne jamais stocker un token, et encore moins son mot de passe, dans un projet. Il est possible de stocker un mot de passe ou token de mani√®re s√©curis√©e et durable avec le credential helper de Git. Celui-ci est pr√©sent√© par la suite.\nS‚Äôil n‚Äôest pas possible d‚Äôutiliser le credential helper de Git, un mot de passe ou token peut √™tre stock√© de mani√®re s√©curis√© dans un syst√®me de gestion de mot de passe comme Keepass.\nNe jamais stocker un jeton Github, ou pire un mot de passe, dans un fichier texte non crypt√©. Les logiciels de gestion de mot de passe (comme Keepass, recommand√© par l‚ÄôAnssi) sont simples d‚Äôusage et permettent de ne conserver sur l‚Äôordinateur qu‚Äôune version hash√©e du mot de passe qui ne peut √™tre d√©crypt√©e qu‚Äôavec un mot de passe connu de vous seuls."
  },
  {
    "objectID": "posts/git-2/exogit.html#cr√©er-un-jeton",
    "href": "posts/git-2/exogit.html#cr√©er-un-jeton",
    "title": "Tools - Git-2",
    "section": "Cr√©er un jeton",
    "text": "Cr√©er un jeton\nLa documentation officielle comporte un certain nombre de captures d‚Äô√©cran expliquant comme proc√©der.\nNous allons utiliser le credential helper associ√© √† Git pour stocker ce jeton. Ce credential helper permet de conserver de mani√®re p√©renne un jeton (on peut aussi faire en sorte que le mot de passe soit automatiquement supprim√© de la m√©moire de l‚Äôordinateur au bout, par exemple, d‚Äôune heure). L‚Äôinconv√©nient de cette m√©thode est que Git √©crit en clair le jeton dans un fichier de configuration. C‚Äôest pour cette raison qu‚Äôon utilise des jetons puisque, si ces derniers sont r√©v√©l√©s, on peut toujours les r√©voquer et √©viter les probl√®mes (pour ne pas stocker en clair un jeton il faudrait utiliser une librairie suppl√©mentaire comme libsecrets qui est au-del√† du programme de ce cours).\nMa recommandation, si vous d√©sirez conserver de mani√®re plus durable ou plus s√©curis√©e votre jeton (en ne conservant pas le jeton en clair mais de mani√®re hash√©e), est d‚Äôutiliser un gestionnaire de mot de passe comme Keepass (recommand√© par l‚ÄôAnssi).\n\nExercice 2 : Cr√©er et stocker un token\n:one: Suivre la documentation officielle en ne donnant que les droits repo au jeton (ajouter les droits workflow si vous d√©sirez que votre jeton soit utilisable pour des projets o√π l‚Äôint√©gration continue est n√©cessaire)\nPour r√©sumer les √©tapes devraient √™tre les suivantes:\nSettings > Developers Settings > Personal Access Token > Generate a new token > ‚ÄúMy bash script‚Äù > Expiration ‚Äú30 days‚Äù > cocher juste ‚Äúrepo‚Äù > Generate token > Le copier\n:two: Ouvrir un terminal depuis Jupyter (par exemple File > New > Terminal).\n:three: [Optionnel] Taper dans le terminal la commande qui convient selon votre syst√®me d‚Äôexploitation pour activer le credential helper:\n# Sous mac et linux et le datalab\ngit config --global credential.helper store\n\n# Sous windows\ngit config --global credential.helper manager-core\n:four: R√©cup√©rer, sur la page d‚Äôaccueil de votre d√©p√¥t, l‚Äôurl du d√©p√¥t distant. Il prend la forme suivante\nhttps://github.com/<username>/<reponame>.git\nVous pouvez utiliser l‚Äôicone √† droite pour copier l‚Äôurl.\n:five: Retournez dans le terminal Jupyter. Taper\ngit clone repo_url\no√π repo_url est l‚Äôurl du d√©p√¥t en question (vous pouvez utiliser MAJ+Inser pour coller l‚Äôurl pr√©c√©demment copi√©)\nTapez Entr√©e. Dans le cas d‚Äôun r√©pertoire priv√© et sans credential helper, renseignez ensuite votre identifiant, faites Entr√©e, puis votre personal access token, Entr√©e. Si vous n‚Äôavez pas d‚Äôerreur, cela signifie que l‚Äôauthentification a bien fonctionn√© et donc que tout va bien. Sinon, il vous suffit de r√©√©crire l‚Äôinstruction git clone et de retenter de taper votre personal access token. Normalement, si vous avez cr√©√© un d√©p√¥t vide dans l‚Äôexercice 1, vous avez un message de Git:\n\nwarning: You appear to have cloned an empty repository.\n\nCeci est normal, ce n‚Äôest pas une erreur. Le dossier de votre projet a bien √©t√© cr√©√©.\nSi vous avez une erreur, suivez la consigne pr√©sent√©e ci-apr√®s pour r√©initialiser votre credential helper\n:six: Si vous le d√©sirez, vous pouvez changer la visibilit√© de votre d√©p√¥t en le rendant public.\n3. [^](#cite_ref-3)\nComme le cr√©ateur de Git √©tait un peu paranoiaque, il est normal de ne pas voir le curseur avancer quand on tape des caract√®res pour le mot de passe, si quelqu‚Äôun regarde votre √©cran il ne pourra ainsi pas savoir combien de caract√®res comporte votre mot de passe.\n\n\nSi vous avez fait une faute de frappe dans le mot de passe ou dans le jeton, il est possible de vider la m√©moire de la mani√®re suivante, sous Mac ou Linux :\ngit config --global --unset credential.helper\nSous Windows, si vous avez utilis√© l‚Äôoption manager-core √©voqu√©e ci-dessus, vous pouvez utiliser une interface graphique pour effacer le mot de passe ou jeton erron√©. Pour cela, dans le menu d√©marrer, taper Gestionnaire d'identification (ou Credential Manager si Windows ne trouve pas). Dans l‚Äôinterface graphique qui s‚Äôouvre, il est possible de supprimer le mot de passe ou jeton en question. Apr√®s cela, vous devriez √† nouveau avoir l‚Äôopportunit√© de taper un mot de passe ou jeton lors d‚Äôune authentification HTTPS."
  },
  {
    "objectID": "posts/git-2/exogit.html#envoyer-des-modifications-sur-le-d√©p√¥t-distant-push",
    "href": "posts/git-2/exogit.html#envoyer-des-modifications-sur-le-d√©p√¥t-distant-push",
    "title": "Tools - Git-2",
    "section": "Envoyer des modifications sur le d√©p√¥t distant: push",
    "text": "Envoyer des modifications sur le d√©p√¥t distant: push\n\nExercice 6 : Interagir avec Github\nIl convient maintenant d‚Äôenvoyer les fichiers sur le d√©p√¥t distant.\n\n:one: L‚Äôobjectif est d‚Äôenvoyer vos modifications vers origin. On va passer par la ligne de commande car les boutons push/pull de l‚Äôextension Jupyter ne fonctionnent pas de mani√®re syst√©matique.\nTaper\ngit push origin master\nCela signifie: ‚Äúgit envoie (push) mes modifications sur la branche master (la branche sur laquelle on a travaill√©, on reviendra dessus) vers mon d√©p√¥t (alias origin)‚Äù\nNormalement, si vous avez utilis√© le credential helper, Git ne vous demande pas vos identifiants de connexion. Sinon, il faut taper votre identifiant github et votre mot de passe correspond au personal access token nouvellement cr√©√© !\n:two: Retournez voir le d√©p√¥t sur Github, vous devriez maintenant voir le fichier .gitignore s‚Äôafficher en page d‚Äôaccueil."
  },
  {
    "objectID": "posts/git-2/exogit.html#la-fonctionnalit√©-pull",
    "href": "posts/git-2/exogit.html#la-fonctionnalit√©-pull",
    "title": "Tools - Git-2",
    "section": "La fonctionnalit√© pull",
    "text": "La fonctionnalit√© pull\nLa deuxi√®me mani√®re d‚Äôinteragir avec le d√©p√¥t est de r√©cup√©rer des r√©sultats disponibles en ligne sur sa copie de travail. On appelle cela pull.\nPour le moment, vous √™tes tout seul sur le d√©p√¥t. Il n‚Äôy a donc pas de partenaire pour modifier un fichier dans le d√©p√¥t distant. On va simuler ce cas en utilisant l‚Äôinterface graphique de Github pour modifier des fichiers. On rappatriera les r√©sultats en local dans un deuxi√®me temps.\n\nExercice 7 : Rapatrier des modifs en local\n:one: Se rendre sur votre d√©p√¥t depuis l‚Äôinterface https://github.com. 2 mani√®res de faire √† ce niveau :\n\nCliquer sur Add file > Create new file et appeler le fichier README.md\nCliquer sur le bouton ADD A README qui est affich√© sur la page d‚Äôaccueil. Supprimez tout autre texte si Github vous a sugg√©r√© un contenu pour le README\n\n:two: L‚Äôobjectif est de donner au README.md un titre en ajoutant, au d√©but du document, la ligne suivante :\n# Mon oeuvre d'art surr√©aliste \nSautez une ligne et entrez le texte que vous d√©sirez, sans ponctuation. Par exemple,\nle ch√™ne un jour dit au roseau\n:three: Cliquez sur l‚Äôonglet Preview pour voir le texte mis en forme au format Markdown\n:four: R√©diger un titre et un message compl√©mentaire pour faire le commit. Conserver l‚Äôoption par d√©faut Commit directly to the master branch\n:five: Editer √† nouveau le README en cliquant sur le crayon juste au dessus de l‚Äôaffichage du contenu du README.\nAjouter une deuxi√®me phrase et corrigez la ponctuation de la premi√®re. Ecrire un message de commit et valider.\nLe Ch√™ne un jour dit au roseau :\nVous avez bien sujet d'accuser la Nature\n:six: Au dessus de l‚Äôaborescence des fichiers, vous devriez voir s‚Äôafficher le titre du dernier commit. Vous pouvez cliquer dessus pour voir la modification que vous avez faite.\n:seven: Les r√©sultats sont sur le d√©p√¥t distant mais ne sont pas sur votre dossier de travail dans Jupyter. Il faut re-synchroniser votre copie locale avec le d√©p√¥t distant :\n\nAvec l‚Äôinterface Jupyter, si cela est possible, appuyez tout simplement sur la petite fl√®che vers le bas, qui est celle qui a d√©sormais la pastille orange.\nSi cette fl√®che n‚Äôest pas disponible ou si vous travaillez dans un autre environnement, vous pouvez utiliser la ligne de commande et taper\n\ngit pull origin master\nCela signifie : ‚Äúgit r√©cup√®re (pull) les modifications sur la branche master vers mon d√©p√¥t (alias origin)‚Äù\n:eight: Regarder, sur JupyterLab, l‚Äôonglet History. Cliquez sur le dernier commit et affichez les changements sur le fichier. Vous pouvez remarquer la finesse du contr√¥le de version : Git d√©tecte au sein de la premi√®re ligne de votre texte que vous avez mis des majuscules ou de la ponctuation.\n\nL‚Äôop√©ration pull permet :\n\nA votre syst√®me local de v√©rifier les modifications sur le d√©p√¥t distant que vous n‚Äôauriez pas faites (cette op√©ration s‚Äôappelle fetch)\nDe les fusionner s‚Äôil n‚Äôy a pas de conflit de version ou si les conflits de version sont automatiquement fusionnables (deux modifications d‚Äôun fichier mais qui ne portent pas sur le m√™me emplacement)."
  },
  {
    "objectID": "posts/git-2/exogit.html#le-workflow-adopt√©",
    "href": "posts/git-2/exogit.html#le-workflow-adopt√©",
    "title": "Tools - Git-2",
    "section": "Le workflow adopt√©",
    "text": "Le workflow adopt√©\nNous allons adopter le mode de travail le plus simple, le Github Flow. Il correspond √† cette forme caract√©ristique d‚Äôarbre:\n\nLa branche master constitue le tronc\nLes branches partent de master et divergent\nLorsque les modifications aboutissent, elles sont int√©gr√©es √† master ; la branche en question dispara√Æt:\n\n\nIl existe des workflows plus complexes, notamment le Git Flow que j‚Äôutilise pour d√©velopper ce cours. Ce tutoriel, tr√®s bien fait, illustre avec un graphique la complexit√© accrue de ce flow:\n\nCette fois, une branche interm√©diaire, par exemple une branche development int√®gre des modifications √† tester avant de les int√©grer dans la version officielle (master).\n\nVous pourrez trouvez des dizaines d‚Äôarticles et d‚Äôouvrages sur ce sujet dont chacun pr√©tend avoir trouv√© la meilleure organisation du travail (Git flow, GitHub flow, GitLab flow‚Ä¶). Ne lisez pas trop ces livres et articles sinon vous serez perdus (un peu comme avec les magazines destin√©s aux jeunes parents‚Ä¶).\nLa m√©thode de travail la plus simple est le Github flow qu‚Äôon vous a propos√© d‚Äôadopter. L‚Äôarborescence est reconnaissable: des branches divergent et reviennent syst√©matiquement vers master.\nPour des projets plus complexes dans des √©quipes d√©veloppant des applications, on pourra utiliser d‚Äôautres m√©thodes de travail, notamment le Git flow. Il n‚Äôexiste pas de r√®gles universelles pour d√©terminer la m√©thode de travail ; l‚Äôimportant c‚Äôest, avant tout, de se mettre d‚Äôaccord sur des r√®gles communes de travail avec votre √©quipe."
  },
  {
    "objectID": "posts/git-2/exogit.html#m√©thode-pour-les-merges",
    "href": "posts/git-2/exogit.html#m√©thode-pour-les-merges",
    "title": "Tools - Git-2",
    "section": "M√©thode pour les merges",
    "text": "M√©thode pour les merges\nLes merges vers master doivent imp√©rativement passer par Github (ou Gitlab). Cela permet de garder une trace explicite de ceux-ci (par exemple ici), sans avoir √† chercher dans l‚Äôarborescence, parfois complexe, d‚Äôun projet.\nLa bonne pratique veut qu‚Äôon fasse un squash commit pour √©viter une inflation du nombre de commits dans master: les branches ont vocation √† proposer une multitude de petits commits, les modifications dans master doivent √™tre simples √† tracer d‚Äôo√π le fait de modifier des petits bouts de code.\nComme on l‚Äôa fait dans un exercice pr√©c√©dent, il est tr√®s pratique d‚Äôajouter dans le corps du message close #xx o√π xx est le num√©ro d‚Äôune issue associ√©e √† la pull request. Lorsque la pull request sera fusionn√©e, l‚Äôissue sera automatiquement ferm√©e et un lien sera cr√©√© entre l‚Äôissue et la pull request. Cela vous permettra de comprendre, plusieurs mois ou ann√©es plus tard comment et pourquoi telle ou telle fonctionnalit√© a √©t√© impl√©ment√©e.\nEn revanche, l‚Äôint√©gration des derni√®res modifications de master vers une branche se fait en local. Si votre branche est en conflit, le conflit doit √™tre r√©solu dans la branche et pas dans master. master doit toujours rester propre."
  },
  {
    "objectID": "posts/git-2/exogit.html#mise-en-pratique",
    "href": "posts/git-2/exogit.html#mise-en-pratique",
    "title": "Tools - Git-2",
    "section": "Mise en pratique",
    "text": "Mise en pratique\n\nExercice 9 : Interactions avec le d√©p√¥t distant\nCet exercice se fait par groupe de trois ou quatre. Il y aura deux r√¥les dans ce sc√©nario :\n\nUne personne aura la responsabilit√© d‚Äô√™tre mainteneur\nDeux √† trois personnes seront d√©veloppeurs.\n\n:one: Le mainteneur cr√©e un d√©p√¥t sur Github. Il/Elle donne des droits au(x) d√©veloppeur(s) du projet (Settings > Manage Access > Invite a collaborator).\n:two: Chaque membre du projet, cr√©e une copie locale du projet gr√¢ce √† la commande git clone ou avec le bouton Clone a repository de JupyterLab.\nPour cela, r√©cup√©rer l‚Äôurl HTTPS du d√©p√¥t en copiant l‚Äôurl du d√©p√¥t que vous pouvez trouver, par exemple, dans la page d‚Äôaccueil du d√©p√¥t, en dessous de Quick setup ‚Äî if you‚Äôve done this kind of thing before\nEn ligne de commande, cela donnera:\ngit clone https://github.com/<username>/<reponame>.git\n:three: Chaque membre du projet cr√©e un fichier avec son nom et son pr√©nom, selon cette structure nom-prenom.md en √©vitant les caract√®res sp√©ciaux. Il √©crit dedans trois phrases de son choix sans ponctuation ni majuscules (pour pouvoir effectuer une correction ult√©rieurement). Enfin, il commit sur le projet.\nPour rappel, en ligne de commande cela donnera les commandes suivantes √† modifier\ngit add nom-prenom.md\ngit commit -m \"C'est l'histoire de XXXXX\"\n:four: Chacun essaie d‚Äôenvoyer (push) ses modifications locales sur le d√©p√¥t:\ngit push origin master\n:five: A ce stade, une seule personne (la plus rapide) devrait ne pas avoir rencontr√© de rejet du push. C‚Äôest normal, avant d‚Äôaccepter une modification Git v√©rifie en premier lieu la coh√©rence de la branche avec le d√©p√¥t distant. Le premier ayant fait un push a modifi√© le d√©p√¥t commun ; les autres doivent int√©grer ces modifications dans leur version locale (pull) avant d‚Äôavoir le droit de proposer un changement.\nPour celui/celle/ceux dont le push a √©t√© refus√©, faire\ngit pull origin master\npour ramener les modifications distantes en local.\n:six: Taper git log et regarder la mani√®re dont a √©t√© int√©gr√© la modification de votre camarade ayant pu faire son push\nVous remarquerez que les commits de vos camarades sont int√©gr√©s tels quels √† l‚Äôhistoire du d√©p√¥t.\n:seven: Faire √† nouveau\ngit pull origin master\nLe dernier doit refaire, √† nouveau, les √©tapes 5 √† 7 (dans une √©quipe de quatre il faudra encore le refaire une fois).\n\n\nQuand on fait face √† un rejet du push, on est tent√© de faire passer en force le push malgr√© la mise en garde pr√©c√©dente.\nIl faut imm√©diatement oublier cette solution, elle cr√©e de nombreux probl√®mes et, en fait, ne r√©sout rien. L‚Äôun des risques est de r√©√©crire enti√®rement l‚Äôhistorique rendant les copies locales, et donc les modifications de vos collaborateurs, caduques. Cela vous vaudra, √† raison, des remontrances de vos partenaires qui perdent le b√©n√©fice de leur historique Git qui, s‚Äôils ont des versions sans push depuis longtemps peuvent avoir diverger fortement du d√©p√¥t ma√Ætre.\n\n\nExercice 10 : G√©rer les conflits quand on travaille sur le m√™me fichier\nDans la continuit√© de l‚Äôexercice pr√©c√©dent, chaque personne va travailler sur les fichiers des autres membres de l‚Äô√©quipe.\n:one: Les deux ou trois d√©veloppeurs ajoutent la ponctuation et les majuscules du fichier du premier d√©veloppeur.\n:two: Ils sautent une ligne et ajoutent une phrase (pas tous la m√™me).\n:three: Valider les r√©sultats (git add . et commit) et faire un push\n:four: La personne la plus rapide n‚Äôa, normalement, rencontr√© aucune difficult√© (elle peut s‚Äôarr√™ter temporairement pour regarder ce qui va se passer chez les voisins). Les autres voient leur push refus√© et doivent faire un pull.\n:boom: Il y a conflit, ce qui doit √™tre signal√© par un message du type:\nAuto-merging XXXXXX\nCONFLICT (content): Merge conflict in XXXXXX.md\nAutomatic merge failed; fix conflicts and then commit the result.\n:five: Etudier le r√©sultat de git status\n:six: Si vous ouvrez les fichiers incrimin√©s, vous devriez voir des balises du type\n<<<<<<< HEAD\nthis is some content to mess with\ncontent to append\n=======\ntotally different content to merge later\n>>>>>>> new_branch_to_merge_later\n:seven: Corriger √† la main les fichiers en choisissant, pour chaque ligne, la version qui vous convient et en retirant les balises. Valider en faisant:\ngit add . && git commit -m \"R√©solution du conflit par XXXX\"\nRemplacer XXXX par votre nom. La balise && permet d‚Äôencha√Æner, en une seule ligne de code, les deux commandes.\n:eight: Faire un push. Pour la derni√®re personne, refaire les op√©rations 4 √† 8\n\nGit permet donc de travailler, en m√™me temps, sur le m√™me fichier et de limiter le nombre de gestes manuels n√©cessaires pour faire la fusion. Lorsqu‚Äôon travaille sur des bouts diff√©rents du m√™me fichier, on n‚Äôa m√™me pas besoin de faire de modification manuelle, la fusion peut √™tre automatique.\nGit est un outil tr√®s puissant. Mais, il ne remplace pas une bonne organisation du travail. Vous l‚Äôavez vu, ce mode de travail uniquement sur master peut √™tre p√©nible. Les branches prennent tout leur sens dans ce cas.\n\nExercice 11 : Gestion des branches\n:one: Le mainteneur va contribuer directement dans master et ne cr√©e pas de branche. Chaque d√©veloppeur cr√©e une branche, en local nomm√©e contrib-XXXXX o√π XXXXX est le pr√©nom:\ngit checkout -b contrib-XXXXX\n:two: Chaque membre du groupe cr√©e un fichier README.md o√π il √©crit une phrase sujet-verbe-compl√©ment. Le mainteneur est le seul √† ajouter un titre dans le README (qu‚Äôil commit dans master).\n:three: Chacun push le produit de son subconscient sur le d√©p√¥t.\n:four: Les d√©veloppeurs ouvrent, chacun, une pull request sur Github de leur branche vers master. Ils lui donnent un titre explicite.\n:five: Dans la discussion de chaque pull request, le mainteneur demande au d√©veloppeur d‚Äôint√©grer le titre qu‚Äôil a √©crit.\n:six: Chaque d√©veloppeur, en local, int√®gre cette modification en faisant\n# Pour √™tre s√ªr d'√™tre sur sa propre branche\ngit checkout branche-XXXX\ngit merge master\nR√©gler le conflit et valider (add et commit). Pousser le r√©sultat. Le mainteneur choisit une des pull request et la valide avec l‚Äôoption squash commits. V√©rifier sur la page d‚Äôaccueil le r√©sultat.\n:seven: L‚Äôauteur (si 2 d√©veloppeurs) ou les deux auteurs (si 3 d√©veloppeurs) de la pull request non valid√©e doivent √† nouveau r√©p√©ter l‚Äôop√©ration 6.\n:eight: Une fois le conflit de version r√©gl√© et pouss√©, le mainteneur valide la pull request selon la m√™me proc√©dure que pr√©cedemment.\n:nine: V√©rifier l‚Äôarborescence du d√©p√¥t dans Insights > Network. Votre arbre doit avoir une forme caract√©ristique de ce qu‚Äôon appelle le Github flow:"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Recent posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nTools - Git-2\n\n\nData Analysis\n\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTools - Git\n\n\nData Analysis\n\n\n\nJun 8, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\nTools - Numpy\n\n\nData Analysis\n\n\n\nJun 5, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\nTools - matplotlib\n\n\nData Analysis\n\n\n\nJun 4, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\nTools - pandas\n\n\nData Analysis\n\n\n\nJun 4, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\nQuarto Computations\n\n\n\nMay 22, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\nQuarto Basics\n\n\n\nMay 20, 2023\n\n\n\n\n\n\n\n\n\n\n¬†\n\n\n\nTitanic dataset analysis using Pandas and Numpy\n\n\nData Visualization\n\n\n\nMay 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow helpful can AI be in solving the water crisis?\n\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCan bamboo help to solve climate crisis?\n\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCan AI decide when to water crops?\n\n\n\nMay 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine learning in Agriculture\n\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIrrigation scheduling with Machine learning\n\n\n\nApr 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDigitaliztion of Agriculture\n\n\n\nApr 17, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/irrigraiton_scheduling/content.html",
    "href": "posts/irrigraiton_scheduling/content.html",
    "title": "Irrigation scheduling with Machine learning",
    "section": "",
    "text": "The proposed system uses a wireless sensor network (WSN) to monitor soil moisture levels and collects data from various sensors installed in the soil. The data collected from the WSN is then processed and analyzed using machine learning algorithms to predict soil moisture levels and determine optimal irrigation schedules.\nThe authors used two machine learning algorithms, support vector regression (SVR) and random forest (RF), to develop the predictive models for soil moisture prediction. The models were trained using data collected from the WSN and validated using real-world data.\nThe results of the study showed that the proposed system is effective in predicting soil moisture levels and optimizing irrigation scheduling. The SVR model outperformed the RF model, achieving a mean absolute error of 0.026 for soil moisture prediction.\nHenceforth, the proposed system provides an automated and intelligent solution for soil moisture prediction and irrigation scheduling, which can help farmers optimize their irrigation practices and reduce water usage."
  },
  {
    "objectID": "posts/Machine learning in Agriculture/index.html",
    "href": "posts/Machine learning in Agriculture/index.html",
    "title": "Machine learning in Agriculture",
    "section": "",
    "text": "The authors first introduce the concept of machine learning and its various techniques, including supervised, unsupervised, and reinforcement learning. They then provide an overview of the different areas in agriculture where machine learning can be applied, such as crop yield prediction, plant disease diagnosis, soil analysis, and livestock management.\nThe article further explores the use of different types of sensors and data collection techniques that can be used to gather data for machine learning applications in agriculture. The authors also discuss the challenges associated with implementing machine learning in agriculture, such as data quality, lack of standardization, and limited computational resources.\nThe authors present several case studies and examples of successful machine learning applications in agriculture, including precision farming, crop monitoring, and yield prediction. The article concludes with a discussion on the future directions and potential impact of machine learning in agriculture, including the development of new tools and technologies to support sustainable agriculture practices and enhance food security."
  },
  {
    "objectID": "posts/matplotlib/Matplotlib Tutorial.html",
    "href": "posts/matplotlib/Matplotlib Tutorial.html",
    "title": "Tools - matplotlib",
    "section": "",
    "text": "Basic Graph\n\n\nCode\nx = [0,1,2,3,4]\ny = [0,2,4,6,8]\n\n# Resize your Graph (dpi specifies pixels per inch. When saving probably should use 300 if possible)\nplt.figure(figsize=(8,5), dpi=100)\n\n# Line 1\n\n# Keyword Argument Notation\n#plt.plot(x,y, label='2x', color='red', linewidth=2, marker='.', linestyle='--', markersize=10, markeredgecolor='blue')\n\n# Shorthand notation\n# fmt = '[color][marker][line]'\nplt.plot(x,y, 'b^--', label='2x')\n\n## Line 2\n\n# select interval we want to plot points at\nx2 = np.arange(0,4.5,0.5)\n\n# Plot part of the graph as line\nplt.plot(x2[:6], x2[:6]**2, 'r', label='X^2')\n\n# Plot remainder of graph as a dot\nplt.plot(x2[5:], x2[5:]**2, 'r--')\n\n# Add a title (specify font parameters with fontdict)\nplt.title('Our First Graph!', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 20})\n\n# X and Y labels\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n\n# X, Y axis Tickmarks (scale of your graph)\nplt.xticks([0,1,2,3,4,])\n#plt.yticks([0,2,4,6,8,10])\n\n# Add a legend\nplt.legend()\n\n# Save figure (dpi 300 is good when saving so graph has high resolution)\nplt.savefig('mygraph.png', dpi=300)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\nBar Chart\n\n\nCode\nlabels = ['A', 'B', 'C']\nvalues = [1,4,2]\n\nplt.figure(figsize=(5,3), dpi=100)\n\nbars = plt.bar(labels, values)\n\npatterns = ['/', 'O', '*']\nfor bar in bars:\n    bar.set_hatch(patterns.pop(0))\n\nplt.savefig('barchart.png', dpi=300)\n\nplt.show()\n\n\n\n\n\n\n\nReal World Examples\nDownload data from his Github (gas_prices.csv & fifa_data.csv)\n\nLine Graph\n\n\nCode\ngas = pd.read_csv('gas_prices.csv')\n\nplt.figure(figsize=(8,5))\n\nplt.title('Gas Prices over Time (in USD)', fontdict={'fontweight':'bold', 'fontsize': 18})\n\nplt.plot(gas.Year, gas.USA, 'b.-', label='United States')\nplt.plot(gas.Year, gas.Canada, 'r.-')\nplt.plot(gas.Year, gas['South Korea'], 'g.-')\nplt.plot(gas.Year, gas.Australia, 'y.-')\n\n# Another Way to plot many values!\n# countries_to_look_at = ['Australia', 'USA', 'Canada', 'South Korea']\n# for country in gas:\n#     if country in countries_to_look_at:\n#         plt.plot(gas.Year, gas[country], marker='.')\n\nplt.xticks(gas.Year[::3].tolist()+[2011])\n\nplt.xlabel('Year')\nplt.ylabel('US Dollars')\n\nplt.legend()\n\nplt.savefig('Gas_price_figure.png', dpi=300)\n\nplt.show()\n\n\n\n\n\n\n\nLoad Fifa Data\n\n\nCode\nfifa = pd.read_csv('fifa_data.csv')\n\nfifa.head(5)\n\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      ID\n      Name\n      Age\n      Photo\n      Nationality\n      Flag\n      Overall\n      Potential\n      Club\n      ...\n      Composure\n      Marking\n      StandingTackle\n      SlidingTackle\n      GKDiving\n      GKHandling\n      GKKicking\n      GKPositioning\n      GKReflexes\n      Release Clause\n    \n  \n  \n    \n      0\n      0\n      158023\n      L. Messi\n      31\n      https://cdn.sofifa.org/players/4/19/158023.png\n      Argentina\n      https://cdn.sofifa.org/flags/52.png\n      94\n      94\n      FC Barcelona\n      ...\n      96.0\n      33.0\n      28.0\n      26.0\n      6.0\n      11.0\n      15.0\n      14.0\n      8.0\n      ‚Ç¨226.5M\n    \n    \n      1\n      1\n      20801\n      Cristiano Ronaldo\n      33\n      https://cdn.sofifa.org/players/4/19/20801.png\n      Portugal\n      https://cdn.sofifa.org/flags/38.png\n      94\n      94\n      Juventus\n      ...\n      95.0\n      28.0\n      31.0\n      23.0\n      7.0\n      11.0\n      15.0\n      14.0\n      11.0\n      ‚Ç¨127.1M\n    \n    \n      2\n      2\n      190871\n      Neymar Jr\n      26\n      https://cdn.sofifa.org/players/4/19/190871.png\n      Brazil\n      https://cdn.sofifa.org/flags/54.png\n      92\n      93\n      Paris Saint-Germain\n      ...\n      94.0\n      27.0\n      24.0\n      33.0\n      9.0\n      9.0\n      15.0\n      15.0\n      11.0\n      ‚Ç¨228.1M\n    \n    \n      3\n      3\n      193080\n      De Gea\n      27\n      https://cdn.sofifa.org/players/4/19/193080.png\n      Spain\n      https://cdn.sofifa.org/flags/45.png\n      91\n      93\n      Manchester United\n      ...\n      68.0\n      15.0\n      21.0\n      13.0\n      90.0\n      85.0\n      87.0\n      88.0\n      94.0\n      ‚Ç¨138.6M\n    \n    \n      4\n      4\n      192985\n      K. De Bruyne\n      27\n      https://cdn.sofifa.org/players/4/19/192985.png\n      Belgium\n      https://cdn.sofifa.org/flags/7.png\n      91\n      92\n      Manchester City\n      ...\n      88.0\n      68.0\n      58.0\n      51.0\n      15.0\n      13.0\n      5.0\n      10.0\n      13.0\n      ‚Ç¨196.4M\n    \n  \n\n5 rows √ó 89 columns\n\n\n\n\n\nHistogram\n\n\nCode\nbins = [40,50,60,70,80,90,100]\n\nplt.figure(figsize=(8,5))\n\nplt.hist(fifa.Overall, bins=bins, color='#abcdef')\n\nplt.xticks(bins)\n\nplt.ylabel('Number of Players')\nplt.xlabel('Skill Level')\nplt.title('Distribution of Player Skills in FIFA 2018')\n\nplt.savefig('histogram.png', dpi=300)\n\nplt.show()\n\n\n\n\n\n\n\nPie Chart\n\n\nCode\nleft = fifa.loc[fifa['Preferred Foot'] == 'Left'].count()[0]\nright = fifa.loc[fifa['Preferred Foot'] == 'Right'].count()[0]\n\nplt.figure(figsize=(8,5))\n\nlabels = ['Left', 'Right']\ncolors = ['#abcdef', '#aabbcc']\n\nplt.pie([left, right], labels = labels, colors=colors, autopct='%.2f %%')\n\nplt.title('Foot Preference of FIFA Players')\n\nplt.show()\n\n\n\n\n\n\n\nPie Chart #2\n\n\nCode\nplt.figure(figsize=(8,5), dpi=100)\n\nplt.style.use('ggplot')\n\nfifa.Weight = [int(x.strip('lbs')) if type(x)==str else x for x in fifa.Weight]\n\nlight = fifa.loc[fifa.Weight < 125].count()[0]\nlight_medium = fifa[(fifa.Weight >= 125) & (fifa.Weight < 150)].count()[0]\nmedium = fifa[(fifa.Weight >= 150) & (fifa.Weight < 175)].count()[0]\nmedium_heavy = fifa[(fifa.Weight >= 175) & (fifa.Weight < 200)].count()[0]\nheavy = fifa[fifa.Weight >= 200].count()[0]\n\nweights = [light,light_medium, medium, medium_heavy, heavy]\nlabel = ['under 125', '125-150', '150-175', '175-200', 'over 200']\nexplode = (.4,.2,0,0,.4)\n\nplt.title('Weight of Professional Soccer Players (lbs)')\n\nplt.pie(weights, labels=label, explode=explode, pctdistance=0.8,autopct='%.2f %%')\nplt.show()\n\n\n\n\n\n\n\nBox and Whiskers Chart\n\n\nCode\nplt.figure(figsize=(5,8), dpi=100)\n\nplt.style.use('default')\n\nbarcelona = fifa.loc[fifa.Club == \"FC Barcelona\"]['Overall']\nmadrid = fifa.loc[fifa.Club == \"Real Madrid\"]['Overall']\nrevs = fifa.loc[fifa.Club == \"New England Revolution\"]['Overall']\n\n#bp = plt.boxplot([barcelona, madrid, revs], labels=['a','b','c'], boxprops=dict(facecolor='red'))\nbp = plt.boxplot([barcelona, madrid, revs], labels=['FC Barcelona','Real Madrid','NE Revolution'], patch_artist=True, medianprops={'linewidth': 2})\n\nplt.title('Professional Soccer Team Comparison')\nplt.ylabel('FIFA Overall Rating')\n\nfor box in bp['boxes']:\n    # change outline color\n    box.set(color='#4286f4', linewidth=2)\n    # change fill color\n    box.set(facecolor = '#e0e0e0' )\n    # change hatch\n    #box.set(hatch = '/')\n    \nplt.show()"
  },
  {
    "objectID": "posts/numpy/Numpy_tutorial.html",
    "href": "posts/numpy/Numpy_tutorial.html",
    "title": "Tools - Numpy",
    "section": "",
    "text": "Python is a great general-purpose programming language on its own, but with the help of a few popular libraries (numpy, scipy, matplotlib) it becomes a powerful environment for scientific computing.\nWe expect that many of you will have some experience with Python and numpy; for the rest of you, this section will serve as a quick crash course both on the Python programming language and on the use of Python for scientific computing.\nSome of you may have previous knowledge in Matlab, in which case we also recommend the numpy for Matlab users page (https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html).\nIn this tutorial, we will cover:\n\nBasic Python: Basic data types (Containers, Lists, Dictionaries, Sets, Tuples), Functions, Classes\nNumpy: Arrays, Array indexing, Datatypes, Array math, Broadcasting\nMatplotlib: Plotting, Subplots, Images\nIPython: Creating notebooks, Typical workflows"
  },
  {
    "objectID": "posts/numpy/Numpy_tutorial.html#a-brief-note-on-python-versions",
    "href": "posts/numpy/Numpy_tutorial.html#a-brief-note-on-python-versions",
    "title": "Tools - Numpy",
    "section": "A Brief Note on Python Versions",
    "text": "A Brief Note on Python Versions\nAs of Janurary 1, 2020, Python has officially dropped support for python2. We‚Äôll be using Python 3.7 for this iteration of the course. You can check your Python version at the command line by running python --version. In Colab, we can enforce the Python version by clicking Runtime -> Change Runtime Type and selecting python3. Note that as of April 2020, Colab uses Python 3.6.9 which should run everything without any errors.\n\n!python --version\n\nPython 3.6.9"
  },
  {
    "objectID": "posts/numpy/Numpy_tutorial.html#basics-of-python",
    "href": "posts/numpy/Numpy_tutorial.html#basics-of-python",
    "title": "Tools - Numpy",
    "section": "Basics of Python",
    "text": "Basics of Python\nPython is a high-level, dynamically typed multiparadigm programming language. Python code is often said to be almost like pseudocode, since it allows you to express very powerful ideas in very few lines of code while being very readable. As an example, here is an implementation of the classic quicksort algorithm in Python:\n\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1]))\n\n[1, 1, 2, 3, 6, 8, 10]\n\n\n\nBasic data types\n\nNumbers\nIntegers and floats work as you would expect from other languages:\n\nx = 3\nprint(x, type(x))\n\n3 <class 'int'>\nERROR! Session/line number was not unique in database. History logging moved to new session 60\n\n\n\nprint(x + 1)   # Addition\nprint(x - 1)   # Subtraction\nprint(x * 2)   # Multiplication\nprint(x ** 2)  # Exponentiation\n\n4\n2\n6\n9\n\n\n\nx += 1\nprint(x)\nx *= 2\nprint(x)\n\n9\n18\n\n\n\ny = 2.5\nprint(type(y))\nprint(y, y + 1, y * 2, y ** 2)\n\n<class 'float'>\n2.5 3.5 5.0 6.25\n\n\nNote that unlike many languages, Python does not have unary increment (x++) or decrement (x‚Äì) operators.\nPython also has built-in types for long integers and complex numbers; you can find all of the details in the documentation.\n\n\nBooleans\nPython implements all of the usual operators for Boolean logic, but uses English words rather than symbols (&&, ||, etc.):\n\nt, f = True, False\nprint(type(t))\n\n<class 'bool'>\n\n\nNow we let‚Äôs look at the operations:\n\nprint(t and f) # Logical AND;\nprint(t or f)  # Logical OR;\nprint(not t)   # Logical NOT;\nprint(t != f)  # Logical XOR;\n\nFalse\nTrue\nFalse\nTrue\n\n\n\n\nStrings\n\nhello = 'hello'   # String literals can use single quotes\nworld = \"world\"   # or double quotes; it does not matter\nprint(hello, len(hello))\n\nhello 5\n\n\n\nhw = hello + ' ' + world  # String concatenation\nprint(hw)\n\nhello world\n\n\n\nhw12 = '{} {} {}'.format(hello, world, 12)  # string formatting\nprint(hw12)\n\nhello world 12\n\n\nString objects have a bunch of useful methods; for example:\n\ns = \"hello\"\nprint(s.capitalize())  # Capitalize a string\nprint(s.upper())       # Convert a string to uppercase; prints \"HELLO\"\nprint(s.rjust(7))      # Right-justify a string, padding with spaces\nprint(s.center(7))     # Center a string, padding with spaces\nprint(s.replace('l', '(ell)'))  # Replace all instances of one substring with another\nprint('  world '.strip())  # Strip leading and trailing whitespace\n\nHello\nHELLO\n  hello\n hello \nhe(ell)(ell)o\nworld\n\n\nYou can find a list of all string methods in the documentation.\n\n\n\nContainers\nPython includes several built-in container types: lists, dictionaries, sets, and tuples.\n\nLists\nA list is the Python equivalent of an array, but is resizeable and can contain elements of different types:\n\nxs = [3, 1, 2]   # Create a list\nprint(xs, xs[2])\nprint(xs[-1])     # Negative indices count from the end of the list; prints \"2\"\n\n[3, 1, 2] 2\n2\n\n\n\nxs[2] = 'foo'    # Lists can contain elements of different types\nprint(xs)\n\n[3, 1, 'foo']\n\n\n\nxs.append('bar') # Add a new element to the end of the list\nprint(xs)  \n\n[3, 1, 'foo', 'bar']\n\n\n\nx = xs.pop()     # Remove and return the last element of the list\nprint(x, xs)\n\nbar [3, 1, 'foo']\n\n\nAs usual, you can find all the gory details about lists in the documentation.\n\n\nSlicing\nIn addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:\n\nnums = list(range(5))    # range is a built-in function that creates a list of integers\nprint(nums)         # Prints \"[0, 1, 2, 3, 4]\"\nprint(nums[2:4])    # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\nprint(nums[2:])     # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\nprint(nums[:2])     # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\nprint(nums[:])      # Get a slice of the whole list; prints [\"0, 1, 2, 3, 4]\"\nprint(nums[:-1])    # Slice indices can be negative; prints [\"0, 1, 2, 3]\"\nnums[2:4] = [8, 9] # Assign a new sublist to a slice\nprint(nums)         # Prints \"[0, 1, 8, 9, 4]\"\n\n[0, 1, 2, 3, 4]\n[2, 3]\n[2, 3, 4]\n[0, 1]\n[0, 1, 2, 3, 4]\n[0, 1, 2, 3]\n[0, 1, 8, 9, 4]\n\n\n\n\nLoops\nYou can loop over the elements of a list like this:\n\nanimals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print(animal)\n\ncat\ndog\nmonkey\n\n\nIf you want access to the index of each element within the body of a loop, use the built-in enumerate function:\n\nanimals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\n    print('#{}: {}'.format(idx + 1, animal))\n\n#1: cat\n#2: dog\n#3: monkey\n\n\n\n\nList comprehensions\nWhen programming, frequently we want to transform one type of data into another. As a simple example, consider the following code that computes square numbers:\n\nnums = [0, 1, 2, 3, 4]\nsquares = []\nfor x in nums:\n    squares.append(x ** 2)\nprint(squares)\n\n[0, 1, 4, 9, 16]\n\n\nYou can make this code simpler using a list comprehension:\n\nnums = [0, 1, 2, 3, 4]\nsquares = [x ** 2 for x in nums]\nprint(squares)\n\n[0, 1, 4, 9, 16]\n\n\nList comprehensions can also contain conditions:\n\nnums = [0, 1, 2, 3, 4]\neven_squares = [x ** 2 for x in nums if x % 2 == 0]\nprint(even_squares)\n\n[0, 4, 16]\n\n\n\n\nDictionaries\nA dictionary stores (key, value) pairs, similar to a Map in Java or an object in Javascript. You can use it like this:\n\nd = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data\nprint(d['cat'])       # Get an entry from a dictionary; prints \"cute\"\nprint('cat' in d)     # Check if a dictionary has a given key; prints \"True\"\n\ncute\nTrue\n\n\n\nd['fish'] = 'wet'    # Set an entry in a dictionary\nprint(d['fish'])      # Prints \"wet\"\n\nwet\n\n\n\nprint(d['monkey'])  # KeyError: 'monkey' not a key of d\n\nKeyError: ignored\n\n\n\nprint(d.get('monkey', 'N/A'))  # Get an element with a default; prints \"N/A\"\nprint(d.get('fish', 'N/A'))    # Get an element with a default; prints \"wet\"\n\nN/A\nwet\n\n\n\ndel d['fish']        # Remove an element from a dictionary\nprint(d.get('fish', 'N/A')) # \"fish\" is no longer a key; prints \"N/A\"\n\nN/A\n\n\nYou can find all you need to know about dictionaries in the documentation.\nIt is easy to iterate over the keys in a dictionary:\n\nd = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal, legs in d.items():\n    print('A {} has {} legs'.format(animal, legs))\n\nA person has 2 legs\nA cat has 4 legs\nA spider has 8 legs\n\n\nDictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries. For example:\n\nnums = [0, 1, 2, 3, 4]\neven_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}\nprint(even_num_to_square)\n\n{0: 0, 2: 4, 4: 16}\n\n\n\n\nSets\nA set is an unordered collection of distinct elements. As a simple example, consider the following:\n\nanimals = {'cat', 'dog'}\nprint('cat' in animals)   # Check if an element is in a set; prints \"True\"\nprint('fish' in animals)  # prints \"False\"\n\nTrue\nFalse\n\n\n\nanimals.add('fish')      # Add an element to a set\nprint('fish' in animals)\nprint(len(animals))       # Number of elements in a set;\n\nTrue\n3\n\n\n\nanimals.add('cat')       # Adding an element that is already in the set does nothing\nprint(len(animals))       \nanimals.remove('cat')    # Remove an element from a set\nprint(len(animals))       \n\n3\n2\n\n\nLoops: Iterating over a set has the same syntax as iterating over a list; however since sets are unordered, you cannot make assumptions about the order in which you visit the elements of the set:\n\nanimals = {'cat', 'dog', 'fish'}\nfor idx, animal in enumerate(animals):\n    print('#{}: {}'.format(idx + 1, animal))\n\n#1: dog\n#2: cat\n#3: fish\n\n\nSet comprehensions: Like lists and dictionaries, we can easily construct sets using set comprehensions:\n\nfrom math import sqrt\nprint({int(sqrt(x)) for x in range(30)})\n\n{0, 1, 2, 3, 4, 5}\n\n\n\n\nTuples\nA tuple is an (immutable) ordered list of values. A tuple is in many ways similar to a list; one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot. Here is a trivial example:\n\nd = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys\nt = (5, 6)       # Create a tuple\nprint(type(t))\nprint(d[t])       \nprint(d[(1, 2)])\n\n<class 'tuple'>\n5\n1\n\n\n\nt[0] = 1\n\nTypeError: ignored\n\n\n\n\n\nFunctions\nPython functions are defined using the def keyword. For example:\n\ndef sign(x):\n    if x > 0:\n        return 'positive'\n    elif x < 0:\n        return 'negative'\n    else:\n        return 'zero'\n\nfor x in [-1, 0, 1]:\n    print(sign(x))\n\nnegative\nzero\npositive\n\n\nWe will often define functions to take optional keyword arguments, like this:\n\ndef hello(name, loud=False):\n    if loud:\n        print('HELLO, {}'.format(name.upper()))\n    else:\n        print('Hello, {}!'.format(name))\n\nhello('Bob')\nhello('Fred', loud=True)\n\nHello, Bob!\nHELLO, FRED\n\n\n###Classes\nThe syntax for defining classes in Python is straightforward:\n\nclass Greeter:\n\n    # Constructor\n    def __init__(self, name):\n        self.name = name  # Create an instance variable\n\n    # Instance method\n    def greet(self, loud=False):\n        if loud:\n          print('HELLO, {}'.format(self.name.upper()))\n        else:\n          print('Hello, {}!'.format(self.name))\n\ng = Greeter('Fred')  # Construct an instance of the Greeter class\ng.greet()            # Call an instance method; prints \"Hello, Fred\"\ng.greet(loud=True)   # Call an instance method; prints \"HELLO, FRED!\"\n\nHello, Fred!\nHELLO, FRED\n\n\n##Numpy\nNumpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays. If you are already familiar with MATLAB, you might find this tutorial useful to get started with Numpy.\nTo use Numpy, we first need to import the numpy package:\n\nimport numpy as np\n\n###Arrays\nA numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.\nWe can initialize numpy arrays from nested Python lists, and access elements using square brackets:\n\na = np.array([1, 2, 3])  # Create a rank 1 array\nprint(type(a), a.shape, a[0], a[1], a[2])\na[0] = 5                 # Change an element of the array\nprint(a)                  \n\n<class 'numpy.ndarray'> (3,) 1 2 3\n[5 2 3]\n\n\n\nb = np.array([[1,2,3],[4,5,6]])   # Create a rank 2 array\nprint(b)\n\n[[1 2 3]\n [4 5 6]]\n\n\n\nprint(b.shape)\nprint(b[0, 0], b[0, 1], b[1, 0])\n\n(2, 3)\n1 2 4\n\n\nNumpy also provides many functions to create arrays:\n\na = np.zeros((2,2))  # Create an array of all zeros\nprint(a)\n\n[[0. 0.]\n [0. 0.]]\n\n\n\nb = np.ones((1,2))   # Create an array of all ones\nprint(b)\n\n[[1. 1.]]\n\n\n\nc = np.full((2,2), 7) # Create a constant array\nprint(c)\n\n[[7 7]\n [7 7]]\n\n\n\nd = np.eye(2)        # Create a 2x2 identity matrix\nprint(d)\n\n[[1. 0.]\n [0. 1.]]\n\n\n\ne = np.random.random((2,2)) # Create an array filled with random values\nprint(e)\n\n[[0.8690054  0.57244319]\n [0.29647245 0.81464494]]\n\n\n\n\nArray indexing\nNumpy offers several ways to index into arrays.\nSlicing: Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array:\n\nimport numpy as np\n\n# Create the following rank 2 array with shape (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n\n# Use slicing to pull out the subarray consisting of the first 2 rows\n# and columns 1 and 2; b is the following array of shape (2, 2):\n# [[2 3]\n#  [6 7]]\nb = a[:2, 1:3]\nprint(b)\n\n[[2 3]\n [6 7]]\n\n\nA slice of an array is a view into the same data, so modifying it will modify the original array.\n\nprint(a[0, 1])\nb[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]\nprint(a[0, 1]) \n\n2\n77\n\n\nYou can also mix integer indexing with slice indexing. However, doing so will yield an array of lower rank than the original array. Note that this is quite different from the way that MATLAB handles array slicing:\n\n# Create the following rank 2 array with shape (3, 4)\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\nprint(a)\n\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n\n\nTwo ways of accessing the data in the middle row of the array. Mixing integer indexing with slices yields an array of lower rank, while using only slices yields an array of the same rank as the original array:\n\nrow_r1 = a[1, :]    # Rank 1 view of the second row of a  \nrow_r2 = a[1:2, :]  # Rank 2 view of the second row of a\nrow_r3 = a[[1], :]  # Rank 2 view of the second row of a\nprint(row_r1, row_r1.shape)\nprint(row_r2, row_r2.shape)\nprint(row_r3, row_r3.shape)\n\n[5 6 7 8] (4,)\n[[5 6 7 8]] (1, 4)\n[[5 6 7 8]] (1, 4)\n\n\n\n# We can make the same distinction when accessing columns of an array:\ncol_r1 = a[:, 1]\ncol_r2 = a[:, 1:2]\nprint(col_r1, col_r1.shape)\nprint()\nprint(col_r2, col_r2.shape)\n\n[ 2  6 10] (3,)\n\n[[ 2]\n [ 6]\n [10]] (3, 1)\n\n\nInteger array indexing: When you index into numpy arrays using slicing, the resulting array view will always be a subarray of the original array. In contrast, integer array indexing allows you to construct arbitrary arrays using the data from another array. Here is an example:\n\na = np.array([[1,2], [3, 4], [5, 6]])\n\n# An example of integer array indexing.\n# The returned array will have shape (3,) and \nprint(a[[0, 1, 2], [0, 1, 0]])\n\n# The above example of integer array indexing is equivalent to this:\nprint(np.array([a[0, 0], a[1, 1], a[2, 0]]))\n\n[1 4 5]\n[1 4 5]\n\n\n\n# When using integer array indexing, you can reuse the same\n# element from the source array:\nprint(a[[0, 0], [1, 1]])\n\n# Equivalent to the previous integer array indexing example\nprint(np.array([a[0, 1], a[0, 1]]))\n\n[2 2]\n[2 2]\n\n\nOne useful trick with integer array indexing is selecting or mutating one element from each row of a matrix:\n\n# Create a new array from which we will select elements\na = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nprint(a)\n\n[[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n\n\n\n# Create an array of indices\nb = np.array([0, 2, 0, 1])\n\n# Select one element from each row of a using the indices in b\nprint(a[np.arange(4), b])  # Prints \"[ 1  6  7 11]\"\n\n[ 1  6  7 11]\n\n\n\n# Mutate one element from each row of a using the indices in b\na[np.arange(4), b] += 10\nprint(a)\n\n[[11  2  3]\n [ 4  5 16]\n [17  8  9]\n [10 21 12]]\n\n\nBoolean array indexing: Boolean array indexing lets you pick out arbitrary elements of an array. Frequently this type of indexing is used to select the elements of an array that satisfy some condition. Here is an example:\n\nimport numpy as np\n\na = np.array([[1,2], [3, 4], [5, 6]])\n\nbool_idx = (a > 2)  # Find the elements of a that are bigger than 2;\n                    # this returns a numpy array of Booleans of the same\n                    # shape as a, where each slot of bool_idx tells\n                    # whether that element of a is > 2.\n\nprint(bool_idx)\n\n[[False False]\n [ True  True]\n [ True  True]]\n\n\n\n# We use boolean array indexing to construct a rank 1 array\n# consisting of the elements of a corresponding to the True values\n# of bool_idx\nprint(a[bool_idx])\n\n# We can do all of the above in a single concise statement:\nprint(a[a > 2])\n\n[3 4 5 6]\n[3 4 5 6]\n\n\nFor brevity we have left out a lot of details about numpy array indexing; if you want to know more you should read the documentation.\n###Datatypes\nEvery numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. Here is an example:\n\nx = np.array([1, 2])  # Let numpy choose the datatype\ny = np.array([1.0, 2.0])  # Let numpy choose the datatype\nz = np.array([1, 2], dtype=np.int64)  # Force a particular datatype\n\nprint(x.dtype, y.dtype, z.dtype)\n\nint64 float64 int64\n\n\nYou can read all about numpy datatypes in the documentation.\n\n\nArray math\nBasic mathematical functions operate elementwise on arrays, and are available both as operator overloads and as functions in the numpy module:\n\nx = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n\n# Elementwise sum; both produce the array\nprint(x + y)\nprint(np.add(x, y))\n\n[[ 6.  8.]\n [10. 12.]]\n[[ 6.  8.]\n [10. 12.]]\n\n\n\n# Elementwise difference; both produce the array\nprint(x - y)\nprint(np.subtract(x, y))\n\n[[-4. -4.]\n [-4. -4.]]\n[[-4. -4.]\n [-4. -4.]]\n\n\n\n# Elementwise product; both produce the array\nprint(x * y)\nprint(np.multiply(x, y))\n\n[[ 5. 12.]\n [21. 32.]]\n[[ 5. 12.]\n [21. 32.]]\n\n\n\n# Elementwise division; both produce the array\n# [[ 0.2         0.33333333]\n#  [ 0.42857143  0.5       ]]\nprint(x / y)\nprint(np.divide(x, y))\n\n[[0.2        0.33333333]\n [0.42857143 0.5       ]]\n[[0.2        0.33333333]\n [0.42857143 0.5       ]]\n\n\n\n# Elementwise square root; produces the array\n# [[ 1.          1.41421356]\n#  [ 1.73205081  2.        ]]\nprint(np.sqrt(x))\n\n[[1.         1.41421356]\n [1.73205081 2.        ]]\n\n\nNote that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices. dot is available both as a function in the numpy module and as an instance method of array objects:\n\nx = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nv = np.array([9,10])\nw = np.array([11, 12])\n\n# Inner product of vectors; both produce 219\nprint(v.dot(w))\nprint(np.dot(v, w))\n\n219\n219\n\n\nYou can also use the @ operator which is equivalent to numpy‚Äôs dot operator.\n\nprint(v @ w)\n\n219\n\n\n\n# Matrix / vector product; both produce the rank 1 array [29 67]\nprint(x.dot(v))\nprint(np.dot(x, v))\nprint(x @ v)\n\n[29 67]\n[29 67]\n[29 67]\n\n\n\n# Matrix / matrix product; both produce the rank 2 array\n# [[19 22]\n#  [43 50]]\nprint(x.dot(y))\nprint(np.dot(x, y))\nprint(x @ y)\n\n[[19 22]\n [43 50]]\n[[19 22]\n [43 50]]\n[[19 22]\n [43 50]]\n\n\nNumpy provides many useful functions for performing computations on arrays; one of the most useful is sum:\n\nx = np.array([[1,2],[3,4]])\n\nprint(np.sum(x))  # Compute sum of all elements; prints \"10\"\nprint(np.sum(x, axis=0))  # Compute sum of each column; prints \"[4 6]\"\nprint(np.sum(x, axis=1))  # Compute sum of each row; prints \"[3 7]\"\n\n10\n[4 6]\n[3 7]\n\n\nYou can find the full list of mathematical functions provided by numpy in the documentation.\nApart from computing mathematical functions using arrays, we frequently need to reshape or otherwise manipulate data in arrays. The simplest example of this type of operation is transposing a matrix; to transpose a matrix, simply use the T attribute of an array object:\n\nprint(x)\nprint(\"transpose\\n\", x.T)\n\n[[1 2]\n [3 4]]\ntranspose\n [[1 3]\n [2 4]]\n\n\n\nv = np.array([[1,2,3]])\nprint(v )\nprint(\"transpose\\n\", v.T)\n\n[[1 2 3]]\ntranspose\n [[1]\n [2]\n [3]]\n\n\n\n\nBroadcasting\nBroadcasting is a powerful mechanism that allows numpy to work with arrays of different shapes when performing arithmetic operations. Frequently we have a smaller array and a larger array, and we want to use the smaller array multiple times to perform some operation on the larger array.\nFor example, suppose that we want to add a constant vector to each row of a matrix. We could do it like this:\n\n# We will add the vector v to each row of the matrix x,\n# storing the result in the matrix y\nx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nv = np.array([1, 0, 1])\ny = np.empty_like(x)   # Create an empty matrix with the same shape as x\n\n# Add the vector v to each row of the matrix x with an explicit loop\nfor i in range(4):\n    y[i, :] = x[i, :] + v\n\nprint(y)\n\n[[ 2  2  4]\n [ 5  5  7]\n [ 8  8 10]\n [11 11 13]]\n\n\nThis works; however when the matrix x is very large, computing an explicit loop in Python could be slow. Note that adding the vector v to each row of the matrix x is equivalent to forming a matrix vv by stacking multiple copies of v vertically, then performing elementwise summation of x and vv. We could implement this approach like this:\n\nvv = np.tile(v, (4, 1))  # Stack 4 copies of v on top of each other\nprint(vv)                # Prints \"[[1 0 1]\n                         #          [1 0 1]\n                         #          [1 0 1]\n                         #          [1 0 1]]\"\n\n[[1 0 1]\n [1 0 1]\n [1 0 1]\n [1 0 1]]\n\n\n\ny = x + vv  # Add x and vv elementwise\nprint(y)\n\n[[ 2  2  4]\n [ 5  5  7]\n [ 8  8 10]\n [11 11 13]]\n\n\nNumpy broadcasting allows us to perform this computation without actually creating multiple copies of v. Consider this version, using broadcasting:\n\nimport numpy as np\n\n# We will add the vector v to each row of the matrix x,\n# storing the result in the matrix y\nx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nv = np.array([1, 0, 1])\ny = x + v  # Add v to each row of x using broadcasting\nprint(y)\n\n[[ 2  2  4]\n [ 5  5  7]\n [ 8  8 10]\n [11 11 13]]\n\n\nThe line y = x + v works even though x has shape (4, 3) and v has shape (3,) due to broadcasting; this line works as if v actually had shape (4, 3), where each row was a copy of v, and the sum was performed elementwise.\nBroadcasting two arrays together follows these rules:\n\nIf the arrays do not have the same rank, prepend the shape of the lower rank array with 1s until both shapes have the same length.\nThe two arrays are said to be compatible in a dimension if they have the same size in the dimension, or if one of the arrays has size 1 in that dimension.\nThe arrays can be broadcast together if they are compatible in all dimensions.\nAfter broadcasting, each array behaves as if it had shape equal to the elementwise maximum of shapes of the two input arrays.\nIn any dimension where one array had size 1 and the other array had size greater than 1, the first array behaves as if it were copied along that dimension\n\nIf this explanation does not make sense, try reading the explanation from the documentation or this explanation.\nFunctions that support broadcasting are known as universal functions. You can find the list of all universal functions in the documentation.\nHere are some applications of broadcasting:\n\n# Compute outer product of vectors\nv = np.array([1,2,3])  # v has shape (3,)\nw = np.array([4,5])    # w has shape (2,)\n# To compute an outer product, we first reshape v to be a column\n# vector of shape (3, 1); we can then broadcast it against w to yield\n# an output of shape (3, 2), which is the outer product of v and w:\n\nprint(np.reshape(v, (3, 1)) * w)\n\n[[ 4  5]\n [ 8 10]\n [12 15]]\n\n\n\n# Add a vector to each row of a matrix\nx = np.array([[1,2,3], [4,5,6]])\n# x has shape (2, 3) and v has shape (3,) so they broadcast to (2, 3),\n# giving the following matrix:\n\nprint(x + v)\n\n[[2 4 6]\n [5 7 9]]\n\n\n\n# Add a vector to each column of a matrix\n# x has shape (2, 3) and w has shape (2,).\n# If we transpose x then it has shape (3, 2) and can be broadcast\n# against w to yield a result of shape (3, 2); transposing this result\n# yields the final result of shape (2, 3) which is the matrix x with\n# the vector w added to each column. Gives the following matrix:\n\nprint((x.T + w).T)\n\n[[ 5  6  7]\n [ 9 10 11]]\n\n\n\n# Another solution is to reshape w to be a row vector of shape (2, 1);\n# we can then broadcast it directly against x to produce the same\n# output.\nprint(x + np.reshape(w, (2, 1)))\n\n[[ 5  6  7]\n [ 9 10 11]]\n\n\n\n# Multiply a matrix by a constant:\n# x has shape (2, 3). Numpy treats scalars as arrays of shape ();\n# these can be broadcast together to shape (2, 3), producing the\n# following array:\nprint(x * 2)\n\n[[ 2  4  6]\n [ 8 10 12]]\n\n\nBroadcasting typically makes your code more concise and faster, so you should strive to use it where possible.\nThis brief overview has touched on many of the important things that you need to know about numpy, but is far from complete. Check out the numpy reference to find out much more about numpy."
  },
  {
    "objectID": "posts/numpy/Numpy_tutorial.html#matplotlib",
    "href": "posts/numpy/Numpy_tutorial.html#matplotlib",
    "title": "Tools - Numpy",
    "section": "Matplotlib",
    "text": "Matplotlib\nMatplotlib is a plotting library. In this section give a brief introduction to the matplotlib.pyplot module, which provides a plotting system similar to that of MATLAB.\n\nimport matplotlib.pyplot as plt\n\nBy running this special iPython command, we will be displaying plots inline:\n\n%matplotlib inline\n\n\nPlotting\nThe most important function in matplotlib is plot, which allows you to plot 2D data. Here is a simple example:\n\n# Compute the x and y coordinates for points on a sine curve\nx = np.arange(0, 3 * np.pi, 0.1)\ny = np.sin(x)\n\n# Plot the points using matplotlib\nplt.plot(x, y)\n\n\n\n\nWith just a little bit of extra work we can easily plot multiple lines at once, and add a title, legend, and axis labels:\n\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Plot the points using matplotlib\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])\n\n<matplotlib.legend.Legend at 0x7f0f39c04780>\n\n\n\n\n\n\n\nSubplots\nYou can plot different things in the same figure using the subplot function. Here is an example:\n\n# Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Set up a subplot grid that has height 2 and width 1,\n# and set the first such subplot as active.\nplt.subplot(2, 1, 1)\n\n# Make the first plot\nplt.plot(x, y_sin)\nplt.title('Sine')\n\n# Set the second subplot as active, and make the second plot.\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n\n# Show the figure.\nplt.show()\n\n\n\n\nYou can read much more about the subplot function in the documentation."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html",
    "href": "posts/pandas/tools-pandas.html",
    "title": "Tools - pandas",
    "section": "",
    "text": "Tools - pandas\nThe pandas library provides high-performance, easy-to-use data structures and data analysis tools. The main data structure is the DataFrame, which you can think of as an in-memory 2D table (like a spreadsheet, with column names and row labels). Many features available in Excel are available programmatically, such as creating pivot tables, computing columns based on other columns, plotting graphs, etc. You can also group rows by column value, or join tables much like in SQL. Pandas is also great at handling time series.\nThis notebook follows the fastai style conventions.\nPrerequisites: * NumPy ‚Äì if you are not familiar with NumPy, we recommend that you go through the NumPy tutorial now."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#creating-a-series",
    "href": "posts/pandas/tools-pandas.html#creating-a-series",
    "title": "Tools - pandas",
    "section": "Creating a Series",
    "text": "Creating a Series\nLet‚Äôs start by creating our first Series object!\n\n\nCode\ns = pd.Series([2,-1,3,5])\ns\n\n\n0    2\n1   -1\n2    3\n3    5\ndtype: int64"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#similar-to-a-1d-ndarray",
    "href": "posts/pandas/tools-pandas.html#similar-to-a-1d-ndarray",
    "title": "Tools - pandas",
    "section": "Similar to a 1D ndarray",
    "text": "Similar to a 1D ndarray\nSeries objects behave much like one-dimensional NumPy ndarrays, and you can often pass them as parameters to NumPy functions:\n\n\nCode\nimport numpy as np\nnp.exp(s)\n\n\n0      7.389056\n1      0.367879\n2     20.085537\n3    148.413159\ndtype: float64\n\n\nArithmetic operations on Series are also possible, and they apply elementwise, just like for ndarrays:\n\n\nCode\ns + [1000,2000,3000,4000]\n\n\n0    1002\n1    1999\n2    3003\n3    4005\ndtype: int64\n\n\nSimilar to NumPy, if you add a single number to a Series, that number is added to all items in the Series. This is called * broadcasting*:\n\n\nCode\ns + 1000\n\n\n0    1002\n1     999\n2    1003\n3    1005\ndtype: int64\n\n\nThe same is true for all binary operations such as * or /, and even conditional operations:\n\n\nCode\ns < 0\n\n\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#index-labels",
    "href": "posts/pandas/tools-pandas.html#index-labels",
    "title": "Tools - pandas",
    "section": "Index labels",
    "text": "Index labels\nEach item in a Series object has a unique identifier called the index label. By default, it is simply the rank of the item in the Series (starting at 0) but you can also set the index labels manually:\n\n\nCode\ns2 = pd.Series([68, 83, 112, 68], index=[\"alice\", \"bob\", \"charles\", \"darwin\"])\ns2\n\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\nYou can then use the Series just like a dict:\n\n\nCode\ns2[\"bob\"]\n\n\n83\n\n\nYou can still access the items by integer location, like in a regular array:\n\n\nCode\ns2[1]\n\n\n83\n\n\nTo make it clear when you are accessing by label or by integer location, it is recommended to always use the loc attribute when accessing by label, and the iloc attribute when accessing by integer location:\n\n\nCode\ns2.loc[\"bob\"]\n\n\n83\n\n\n\n\nCode\ns2.iloc[1]\n\n\n83\n\n\nSlicing a Series also slices the index labels:\n\n\nCode\ns2.iloc[1:3]\n\n\nbob         83\ncharles    112\ndtype: int64\n\n\nThis can lead to unexpected results when using the default numeric labels, so be careful:\n\n\nCode\nsurprise = pd.Series([1000, 1001, 1002, 1003])\nsurprise\n\n\n0    1000\n1    1001\n2    1002\n3    1003\ndtype: int64\n\n\n\n\nCode\nsurprise_slice = surprise[2:]\nsurprise_slice\n\n\n2    1002\n3    1003\ndtype: int64\n\n\nOh look! The first element has index label 2. The element with index label 0 is absent from the slice:\n\n\nCode\ntry:\n    surprise_slice[0]\nexcept KeyError as e:\n    print(\"Key error:\", e)\n\n\nKey error: 0\n\n\nBut remember that you can access elements by integer location using the iloc attribute. This illustrates another reason why it‚Äôs always better to use loc and iloc to access Series objects:\n\n\nCode\nsurprise_slice.iloc[0]\n\n\n1002"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#init-from-dict",
    "href": "posts/pandas/tools-pandas.html#init-from-dict",
    "title": "Tools - pandas",
    "section": "Init from dict",
    "text": "Init from dict\nYou can create a Series object from a dict. The keys will be used as index labels:\n\n\nCode\nweights = {\"alice\": 68, \"bob\": 83, \"colin\": 86, \"darwin\": 68}\ns3 = pd.Series(weights)\ns3\n\n\nalice     68\nbob       83\ncolin     86\ndarwin    68\ndtype: int64\n\n\nYou can control which elements you want to include in the Series and in what order by explicitly specifying the desired index:\n\n\nCode\ns4 = pd.Series(weights, index = [\"colin\", \"alice\"])\ns4\n\n\ncolin    86\nalice    68\ndtype: int64"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#automatic-alignment",
    "href": "posts/pandas/tools-pandas.html#automatic-alignment",
    "title": "Tools - pandas",
    "section": "Automatic alignment",
    "text": "Automatic alignment\nWhen an operation involves multiple Series objects, pandas automatically aligns items by matching index labels.\n\n\nCode\nprint(s2.keys())\nprint(s3.keys())\n\ns2 + s3\n\n\nIndex(['alice', 'bob', 'charles', 'darwin'], dtype='object')\nIndex(['alice', 'bob', 'colin', 'darwin'], dtype='object')\n\n\nalice      136.0\nbob        166.0\ncharles      NaN\ncolin        NaN\ndarwin     136.0\ndtype: float64\n\n\nThe resulting Series contains the union of index labels from s2 and s3. Since \"colin\" is missing from s2 and \"charles\" is missing from s3, these items have a NaN result value. (ie. Not-a-Number means missing).\nAutomatic alignment is very handy when working with data that may come from various sources with varying structure and missing items. But if you forget to set the right index labels, you can have surprising results:\n\n\nCode\ns5 = pd.Series([1000,1000,1000,1000])\nprint(\"s2 =\", s2.values)\nprint(\"s5 =\", s5.values)\n\ns2 + s5\n\n\ns2 = [ 68  83 112  68]\ns5 = [1000 1000 1000 1000]\n\n\nalice     NaN\nbob       NaN\ncharles   NaN\ndarwin    NaN\n0         NaN\n1         NaN\n2         NaN\n3         NaN\ndtype: float64\n\n\nPandas could not align the Series, since their labels do not match at all, hence the full NaN result."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#init-with-a-scalar",
    "href": "posts/pandas/tools-pandas.html#init-with-a-scalar",
    "title": "Tools - pandas",
    "section": "Init with a scalar",
    "text": "Init with a scalar\nYou can also initialize a Series object using a scalar and a list of index labels: all items will be set to the scalar.\n\n\nCode\nmeaning = pd.Series(42, [\"life\", \"universe\", \"everything\"])\nmeaning\n\n\nlife          42\nuniverse      42\neverything    42\ndtype: int64"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#series-name",
    "href": "posts/pandas/tools-pandas.html#series-name",
    "title": "Tools - pandas",
    "section": "Series name",
    "text": "Series name\nA Series can have a name:\n\n\nCode\ns6 = pd.Series([83, 68], index=[\"bob\", \"alice\"], name=\"weights\")\ns6\n\n\nbob      83\nalice    68\nName: weights, dtype: int64"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#plotting-a-series",
    "href": "posts/pandas/tools-pandas.html#plotting-a-series",
    "title": "Tools - pandas",
    "section": "Plotting a Series",
    "text": "Plotting a Series\nPandas makes it easy to plot Series data using matplotlib (for more details on matplotlib, check out the matplotlib tutorial). Just import matplotlib and call the plot() method:\n\n\nCode\n%matplotlib inline\nimport matplotlib.pyplot as plt\ntemperatures = [4.4,5.1,6.1,6.2,6.1,6.1,5.7,5.2,4.7,4.1,3.9,3.5]\ns7 = pd.Series(temperatures, name=\"Temperature\")\ns7.plot()\nplt.show()\n\n\n\n\n\nThere are many options for plotting your data. It is not necessary to list them all here: if you need a particular type of plot (histograms, pie charts, etc.), just look for it in the excellent Visualization section of pandas‚Äô documentation, and look at the example code."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#time-range",
    "href": "posts/pandas/tools-pandas.html#time-range",
    "title": "Tools - pandas",
    "section": "Time range",
    "text": "Time range\nLet‚Äôs start by creating a time series using pd.date_range(). This returns a DatetimeIndex containing one datetime per hour for 12 hours starting on October 29th 2016 at 5:30pm.\n\n\nCode\ndates = pd.date_range('2016/10/29 5:30pm', periods=12, freq='H')\ndates\n\n\nDatetimeIndex(['2016-10-29 17:30:00', '2016-10-29 18:30:00',\n               '2016-10-29 19:30:00', '2016-10-29 20:30:00',\n               '2016-10-29 21:30:00', '2016-10-29 22:30:00',\n               '2016-10-29 23:30:00', '2016-10-30 00:30:00',\n               '2016-10-30 01:30:00', '2016-10-30 02:30:00',\n               '2016-10-30 03:30:00', '2016-10-30 04:30:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\nThis DatetimeIndex may be used as an index in a Series:\n\n\nCode\ntemp_series = pd.Series(temperatures, dates)\ntemp_series\n\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\nLet‚Äôs plot this series:\n\n\nCode\ntemp_series.plot(kind=\"bar\")\n\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#resampling",
    "href": "posts/pandas/tools-pandas.html#resampling",
    "title": "Tools - pandas",
    "section": "Resampling",
    "text": "Resampling\nPandas lets us resample a time series very simply. Just call the resample() method and specify a new frequency:\n\n\nCode\ntemp_series_freq_2H = temp_series.resample(\"2H\")\ntemp_series_freq_2H\n\n\n<pandas.core.resample.DatetimeIndexResampler object at 0x7f69a91f0190>\n\n\nThe resampling operation is actually a deferred operation, which is why we did not get a Series object, but a DatetimeIndexResampler object instead. To actually perform the resampling operation, we can simply call the mean() method: Pandas will compute the mean of every pair of consecutive hours:\n\n\nCode\ntemp_series_freq_2H = temp_series_freq_2H.mean()\n\n\nLet‚Äôs plot the result:\n\n\nCode\ntemp_series_freq_2H.plot(kind=\"bar\")\nplt.show()\n\n\n\n\n\nNote how the values have automatically been aggregated into 2-hour periods. If we look at the 6-8pm period, for example, we had a value of 5.1 at 6:30pm, and 6.1 at 7:30pm. After resampling, we just have one value of 5.6, which is the mean of 5.1 and 6.1. Rather than computing the mean, we could have used any other aggregation function, for example we can decide to keep the minimum value of each period:\n\n\nCode\ntemp_series_freq_2H = temp_series.resample(\"2H\").min()\ntemp_series_freq_2H\n\n\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64\n\n\nOr, equivalently, we could use the apply() method instead:\n\n\nCode\ntemp_series_freq_2H = temp_series.resample(\"2H\").apply(np.min)\ntemp_series_freq_2H\n\n\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#upsampling-and-interpolation",
    "href": "posts/pandas/tools-pandas.html#upsampling-and-interpolation",
    "title": "Tools - pandas",
    "section": "Upsampling and interpolation",
    "text": "Upsampling and interpolation\nThis was an example of downsampling. We can also upsample (ie. increase the frequency), but this creates holes in our data:\n\n\nCode\ntemp_series_freq_15min = temp_series.resample(\"15Min\").mean()\ntemp_series_freq_15min.head(n=10) # `head` displays the top n values\n\n\n2016-10-29 17:30:00    4.4\n2016-10-29 17:45:00    NaN\n2016-10-29 18:00:00    NaN\n2016-10-29 18:15:00    NaN\n2016-10-29 18:30:00    5.1\n2016-10-29 18:45:00    NaN\n2016-10-29 19:00:00    NaN\n2016-10-29 19:15:00    NaN\n2016-10-29 19:30:00    6.1\n2016-10-29 19:45:00    NaN\nFreq: 15T, dtype: float64\n\n\nOne solution is to fill the gaps by interpolating. We just call the interpolate() method. The default is to use linear interpolation, but we can also select another method, such as cubic interpolation:\n\n\nCode\ntemp_series_freq_15min = temp_series.resample(\"15Min\").interpolate(method=\"cubic\")\ntemp_series_freq_15min.head(n=10)\n\n\n2016-10-29 17:30:00    4.400000\n2016-10-29 17:45:00    4.452911\n2016-10-29 18:00:00    4.605113\n2016-10-29 18:15:00    4.829758\n2016-10-29 18:30:00    5.100000\n2016-10-29 18:45:00    5.388992\n2016-10-29 19:00:00    5.669887\n2016-10-29 19:15:00    5.915839\n2016-10-29 19:30:00    6.100000\n2016-10-29 19:45:00    6.203621\nFreq: 15T, dtype: float64\n\n\n\n\nCode\ntemp_series.plot(label=\"Period: 1 hour\")\ntemp_series_freq_15min.plot(label=\"Period: 15 minutes\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#timezones",
    "href": "posts/pandas/tools-pandas.html#timezones",
    "title": "Tools - pandas",
    "section": "Timezones",
    "text": "Timezones\nBy default datetimes are naive: they are not aware of timezones, so 2016-10-30 02:30 might mean October 30th 2016 at 2:30am in Paris or in New York. We can make datetimes timezone aware by calling the tz_localize() method:\n\n\nCode\ntemp_series_ny = temp_series.tz_localize(\"America/New_York\")\ntemp_series_ny\n\n\n2016-10-29 17:30:00-04:00    4.4\n2016-10-29 18:30:00-04:00    5.1\n2016-10-29 19:30:00-04:00    6.1\n2016-10-29 20:30:00-04:00    6.2\n2016-10-29 21:30:00-04:00    6.1\n2016-10-29 22:30:00-04:00    6.1\n2016-10-29 23:30:00-04:00    5.7\n2016-10-30 00:30:00-04:00    5.2\n2016-10-30 01:30:00-04:00    4.7\n2016-10-30 02:30:00-04:00    4.1\n2016-10-30 03:30:00-04:00    3.9\n2016-10-30 04:30:00-04:00    3.5\ndtype: float64\n\n\nNote that -04:00 is now appended to all the datetimes. This means that these datetimes refer to UTC - 4 hours.\nWe can convert these datetimes to Paris time like this:\n\n\nCode\ntemp_series_paris = temp_series_ny.tz_convert(\"Europe/Paris\")\ntemp_series_paris\n\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64\n\n\nYou may have noticed that the UTC offset changes from +02:00 to +01:00: this is because France switches to winter time at 3am that particular night (time goes back to 2am). Notice that 2:30am occurs twice! Let‚Äôs go back to a naive representation (if you log some data hourly using local time, without storing the timezone, you might get something like this):\n\n\nCode\ntemp_series_paris_naive = temp_series_paris.tz_localize(None)\ntemp_series_paris_naive\n\n\n2016-10-29 23:30:00    4.4\n2016-10-30 00:30:00    5.1\n2016-10-30 01:30:00    6.1\n2016-10-30 02:30:00    6.2\n2016-10-30 02:30:00    6.1\n2016-10-30 03:30:00    6.1\n2016-10-30 04:30:00    5.7\n2016-10-30 05:30:00    5.2\n2016-10-30 06:30:00    4.7\n2016-10-30 07:30:00    4.1\n2016-10-30 08:30:00    3.9\n2016-10-30 09:30:00    3.5\ndtype: float64\n\n\nNow 02:30 is really ambiguous. If we try to localize these naive datetimes to the Paris timezone, we get an error:\n\n\nCode\ntry:\n    temp_series_paris_naive.tz_localize(\"Europe/Paris\")\nexcept Exception as e:\n    print(type(e))\n    print(e)\n\n\n<class 'pytz.exceptions.AmbiguousTimeError'>\nCannot infer dst time from 2016-10-30 02:30:00, try using the 'ambiguous' argument\n\n\nFortunately using the ambiguous argument we can tell pandas to infer the right DST (Daylight Saving Time) based on the order of the ambiguous timestamps:\n\n\nCode\ntemp_series_paris_naive.tz_localize(\"Europe/Paris\", ambiguous=\"infer\")\n\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#periods",
    "href": "posts/pandas/tools-pandas.html#periods",
    "title": "Tools - pandas",
    "section": "Periods",
    "text": "Periods\nThe pd.period_range() function returns a PeriodIndex instead of a DatetimeIndex. For example, let‚Äôs get all quarters in 2016 and 2017:\n\n\nCode\nquarters = pd.period_range('2016Q1', periods=8, freq='Q')\nquarters\n\n\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n\n\nAdding a number N to a PeriodIndex shifts the periods by N times the PeriodIndex‚Äôs frequency:\n\n\nCode\nquarters + 3\n\n\nPeriodIndex(['2016Q4', '2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1',\n             '2018Q2', '2018Q3'],\n            dtype='period[Q-DEC]')\n\n\nThe asfreq() method lets us change the frequency of the PeriodIndex. All periods are lengthened or shortened accordingly. For example, let‚Äôs convert all the quarterly periods to monthly periods (zooming in):\n\n\nCode\nquarters.asfreq(\"M\")\n\n\nPeriodIndex(['2016-03', '2016-06', '2016-09', '2016-12', '2017-03', '2017-06',\n             '2017-09', '2017-12'],\n            dtype='period[M]')\n\n\nBy default, the asfreq zooms on the end of each period. We can tell it to zoom on the start of each period instead:\n\n\nCode\nquarters.asfreq(\"M\", how=\"start\")\n\n\nPeriodIndex(['2016-01', '2016-04', '2016-07', '2016-10', '2017-01', '2017-04',\n             '2017-07', '2017-10'],\n            dtype='period[M]')\n\n\nAnd we can zoom out:\n\n\nCode\nquarters.asfreq(\"A\")\n\n\nPeriodIndex(['2016', '2016', '2016', '2016', '2017', '2017', '2017', '2017'], dtype='period[A-DEC]')\n\n\nOf course we can create a Series with a PeriodIndex:\n\n\nCode\nquarterly_revenue = pd.Series([300, 320, 290, 390, 320, 360, 310, 410], index = quarters)\nquarterly_revenue\n\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\n\nCode\nquarterly_revenue.plot(kind=\"line\")\nplt.show()\n\n\n\n\n\nWe can convert periods to timestamps by calling to_timestamp. By default this will give us the first day of each period, but by setting how and freq, we can get the last hour of each period:\n\n\nCode\nlast_hours = quarterly_revenue.to_timestamp(how=\"end\", freq=\"H\")\nlast_hours\n\n\n2016-03-31 23:59:59.999999999    300\n2016-06-30 23:59:59.999999999    320\n2016-09-30 23:59:59.999999999    290\n2016-12-31 23:59:59.999999999    390\n2017-03-31 23:59:59.999999999    320\n2017-06-30 23:59:59.999999999    360\n2017-09-30 23:59:59.999999999    310\n2017-12-31 23:59:59.999999999    410\ndtype: int64\n\n\nAnd back to periods by calling to_period:\n\n\nCode\nlast_hours.to_period()\n\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\nPandas also provides many other time-related functions that we recommend you check out in the documentation. To whet your appetite, here is one way to get the last business day of each month in 2016, at 9am:\n\n\nCode\nmonths_2016 = pd.period_range(\"2016\", periods=12, freq=\"M\")\none_day_after_last_days = months_2016.asfreq(\"D\") + 1\nlast_bdays = one_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay()\nlast_bdays.to_period(\"H\") + 9\n\n\nPeriodIndex(['2016-01-29 09:00', '2016-02-29 09:00', '2016-03-31 09:00',\n             '2016-04-29 09:00', '2016-05-31 09:00', '2016-06-30 09:00',\n             '2016-07-29 09:00', '2016-08-31 09:00', '2016-09-30 09:00',\n             '2016-10-31 09:00', '2016-11-30 09:00', '2016-12-30 09:00'],\n            dtype='period[H]')"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#creating-a-dataframe",
    "href": "posts/pandas/tools-pandas.html#creating-a-dataframe",
    "title": "Tools - pandas",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\nYou can create a DataFrame by passing a dictionary of Series objects:\n\n\nCode\npeople_dict = {\n    \"weight\": pd.Series([68, 83, 112], index=[\"alice\", \"bob\", \"charles\"]),\n    \"birthyear\": pd.Series([1984, 1985, 1992], index=[\"bob\", \"alice\", \"charles\"], name=\"year\"),\n    \"children\": pd.Series([0, 3], index=[\"charles\", \"bob\"]),\n    \"hobby\": pd.Series([\"Biking\", \"Dancing\"], index=[\"alice\", \"bob\"]),\n}\npeople = pd.DataFrame(people_dict)\npeople\n\n\n\n\n\n\n  \n    \n      \n      weight\n      birthyear\n      children\n      hobby\n    \n  \n  \n    \n      alice\n      68\n      1985\n      NaN\n      Biking\n    \n    \n      bob\n      83\n      1984\n      3.0\n      Dancing\n    \n    \n      charles\n      112\n      1992\n      0.0\n      NaN\n    \n  \n\n\n\n\nA few things to note: * the Series were automatically aligned based on their index, * missing values are represented as NaN, * Series names are ignored (the name \"year\" was dropped), * DataFrames are displayed nicely in Jupyter notebooks, woohoo!\nYou can access columns pretty much as you would expect. They are returned as Series objects:\n\n\nCode\npeople[\"birthyear\"]\n\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\nYou can also get multiple columns at once:\n\n\nCode\npeople[[\"birthyear\", \"hobby\"]]\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n    \n    \n      bob\n      1984\n      Dancing\n    \n    \n      charles\n      1992\n      NaN\n    \n  \n\n\n\n\nIf you pass a list of columns and/or index row labels to the DataFrame constructor, it will guarantee that these columns and/or rows will exist, in that order, and no other column/row will exist. For example:\n\n\nCode\nd2 = pd.DataFrame(\n        people_dict,\n        columns=[\"birthyear\", \"weight\", \"height\"],\n        index=[\"bob\", \"alice\", \"eugene\"]\n     )\nd2\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      weight\n      height\n    \n  \n  \n    \n      bob\n      1984.0\n      83.0\n      NaN\n    \n    \n      alice\n      1985.0\n      68.0\n      NaN\n    \n    \n      eugene\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\nAnother convenient way to create a DataFrame is to pass all the values to the constructor as an ndarray, or a list of lists, and specify the column names and row index labels separately:\n\n\nCode\nvalues = [\n            [1985, np.nan, \"Biking\",   68],\n            [1984, 3,      \"Dancing\",  83],\n            [1992, 0,      np.nan,    112]\n         ]\nd3 = pd.DataFrame(\n        values,\n        columns=[\"birthyear\", \"children\", \"hobby\", \"weight\"],\n        index=[\"alice\", \"bob\", \"charles\"]\n     )\nd3\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      children\n      hobby\n      weight\n    \n  \n  \n    \n      alice\n      1985\n      NaN\n      Biking\n      68\n    \n    \n      bob\n      1984\n      3.0\n      Dancing\n      83\n    \n    \n      charles\n      1992\n      0.0\n      NaN\n      112\n    \n  \n\n\n\n\nTo specify missing values, you can either use np.nan or NumPy‚Äôs masked arrays:\n\n\nCode\nmasked_array = np.ma.asarray(values, dtype=np.object)\nmasked_array[(0, 2), (1, 2)] = np.ma.masked\nd3 = pd.DataFrame(\n        masked_array,\n        columns=[\"birthyear\", \"children\", \"hobby\", \"weight\"],\n        index=[\"alice\", \"bob\", \"charles\"]\n     )\nd3\n\n\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. \nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      children\n      hobby\n      weight\n    \n  \n  \n    \n      alice\n      1985\n      NaN\n      Biking\n      68\n    \n    \n      bob\n      1984\n      3\n      Dancing\n      83\n    \n    \n      charles\n      1992\n      0\n      NaN\n      112\n    \n  \n\n\n\n\nInstead of an ndarray, you can also pass a DataFrame object:\n\n\nCode\nd4 = pd.DataFrame(\n         d3,\n         columns=[\"hobby\", \"children\"],\n         index=[\"alice\", \"bob\"]\n     )\nd4\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      children\n    \n  \n  \n    \n      alice\n      Biking\n      NaN\n    \n    \n      bob\n      Dancing\n      3\n    \n  \n\n\n\n\nIt is also possible to create a DataFrame with a dictionary (or list) of dictionaries (or list):\n\n\nCode\npeople = pd.DataFrame({\n    \"birthyear\": {\"alice\":1985, \"bob\": 1984, \"charles\": 1992},\n    \"hobby\": {\"alice\":\"Biking\", \"bob\": \"Dancing\"},\n    \"weight\": {\"alice\":68, \"bob\": 83, \"charles\": 112},\n    \"children\": {\"bob\": 3, \"charles\": 0}\n})\npeople\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#multi-indexing",
    "href": "posts/pandas/tools-pandas.html#multi-indexing",
    "title": "Tools - pandas",
    "section": "Multi-indexing",
    "text": "Multi-indexing\nIf all columns are tuples of the same size, then they are understood as a multi-index. The same goes for row index labels. For example:\n\n\nCode\nd5 = pd.DataFrame(\n  {\n    (\"public\", \"birthyear\"):\n        {(\"Paris\",\"alice\"):1985, (\"Paris\",\"bob\"): 1984, (\"London\",\"charles\"): 1992},\n    (\"public\", \"hobby\"):\n        {(\"Paris\",\"alice\"):\"Biking\", (\"Paris\",\"bob\"): \"Dancing\"},\n    (\"private\", \"weight\"):\n        {(\"Paris\",\"alice\"):68, (\"Paris\",\"bob\"): 83, (\"London\",\"charles\"): 112},\n    (\"private\", \"children\"):\n        {(\"Paris\", \"alice\"):np.nan, (\"Paris\",\"bob\"): 3, (\"London\",\"charles\"): 0}\n  }\n)\nd5\n\n\n\n\n\n\n  \n    \n      \n      \n      public\n      private\n    \n    \n      \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      London\n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\nYou can now get a DataFrame containing all the \"public\" columns very simply:\n\n\nCode\nd5[\"public\"]\n\n\n\n\n\n\n  \n    \n      \n      \n      birthyear\n      hobby\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n    \n    \n      bob\n      1984\n      Dancing\n    \n    \n      London\n      charles\n      1992\n      NaN\n    \n  \n\n\n\n\n\n\nCode\nd5[\"public\", \"hobby\"]  # Same result as d5[\"public\"][\"hobby\"]\n\n\nParis   alice       Biking\n        bob        Dancing\nLondon  charles        NaN\nName: (public, hobby), dtype: object"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#dropping-a-level",
    "href": "posts/pandas/tools-pandas.html#dropping-a-level",
    "title": "Tools - pandas",
    "section": "Dropping a level",
    "text": "Dropping a level\nLet‚Äôs look at d5 again:\n\n\nCode\nd5\n\n\n\n\n\n\n  \n    \n      \n      \n      public\n      private\n    \n    \n      \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      London\n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\nThere are two levels of columns, and two levels of indices. We can drop a column level by calling droplevel() (the same goes for indices):\n\n\nCode\nd5.columns = d5.columns.droplevel(level = 0)\nd5\n\n\n\n\n\n\n  \n    \n      \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      London\n      charles\n      1992\n      NaN\n      112\n      0.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#transposing",
    "href": "posts/pandas/tools-pandas.html#transposing",
    "title": "Tools - pandas",
    "section": "Transposing",
    "text": "Transposing\nYou can swap columns and indices using the T attribute:\n\n\nCode\nd6 = d5.T\nd6\n\n\n\n\n\n\n  \n    \n      \n      Paris\n      London\n    \n    \n      \n      alice\n      bob\n      charles\n    \n  \n  \n    \n      birthyear\n      1985\n      1984\n      1992\n    \n    \n      hobby\n      Biking\n      Dancing\n      NaN\n    \n    \n      weight\n      68\n      83\n      112\n    \n    \n      children\n      NaN\n      3.0\n      0.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#stacking-and-unstacking-levels",
    "href": "posts/pandas/tools-pandas.html#stacking-and-unstacking-levels",
    "title": "Tools - pandas",
    "section": "Stacking and unstacking levels",
    "text": "Stacking and unstacking levels\nCalling the stack() method will push the lowest column level after the lowest index:\n\n\nCode\nd7 = d6.stack()\nd7\n\n\n\n\n\n\n  \n    \n      \n      \n      London\n      Paris\n    \n  \n  \n    \n      birthyear\n      alice\n      NaN\n      1985\n    \n    \n      bob\n      NaN\n      1984\n    \n    \n      charles\n      1992\n      NaN\n    \n    \n      hobby\n      alice\n      NaN\n      Biking\n    \n    \n      bob\n      NaN\n      Dancing\n    \n    \n      weight\n      alice\n      NaN\n      68\n    \n    \n      bob\n      NaN\n      83\n    \n    \n      charles\n      112\n      NaN\n    \n    \n      children\n      bob\n      NaN\n      3.0\n    \n    \n      charles\n      0.0\n      NaN\n    \n  \n\n\n\n\nNote that many NaN values appeared. This makes sense because many new combinations did not exist before (eg. there was no bob in London).\nCalling unstack() will do the reverse, once again creating many NaN values.\n\n\nCode\nd8 = d7.unstack()\nd8\n\n\n\n\n\n\n  \n    \n      \n      London\n      Paris\n    \n    \n      \n      alice\n      bob\n      charles\n      alice\n      bob\n      charles\n    \n  \n  \n    \n      birthyear\n      NaN\n      NaN\n      1992\n      1985\n      1984\n      NaN\n    \n    \n      children\n      NaN\n      NaN\n      0.0\n      NaN\n      3.0\n      NaN\n    \n    \n      hobby\n      NaN\n      NaN\n      NaN\n      Biking\n      Dancing\n      NaN\n    \n    \n      weight\n      NaN\n      NaN\n      112\n      68\n      83\n      NaN\n    \n  \n\n\n\n\nIf we call unstack again, we end up with a Series object:\n\n\nCode\nd9 = d8.unstack()\nd9\n\n\nLondon  alice    birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        bob      birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        charles  birthyear       1992\n                 children         0.0\n                 hobby            NaN\n                 weight           112\nParis   alice    birthyear       1985\n                 children         NaN\n                 hobby         Biking\n                 weight            68\n        bob      birthyear       1984\n                 children         3.0\n                 hobby        Dancing\n                 weight            83\n        charles  birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\ndtype: object\n\n\nThe stack() and unstack() methods let you select the level to stack/unstack. You can even stack/unstack multiple levels at once:\n\n\nCode\nd10 = d9.unstack(level = (0,1))\nd10\n\n\n\n\n\n\n  \n    \n      \n      London\n      Paris\n    \n    \n      \n      alice\n      bob\n      charles\n      alice\n      bob\n      charles\n    \n  \n  \n    \n      birthyear\n      NaN\n      NaN\n      1992\n      1985\n      1984\n      NaN\n    \n    \n      children\n      NaN\n      NaN\n      0.0\n      NaN\n      3.0\n      NaN\n    \n    \n      hobby\n      NaN\n      NaN\n      NaN\n      Biking\n      Dancing\n      NaN\n    \n    \n      weight\n      NaN\n      NaN\n      112\n      68\n      83\n      NaN"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#most-methods-return-modified-copies",
    "href": "posts/pandas/tools-pandas.html#most-methods-return-modified-copies",
    "title": "Tools - pandas",
    "section": "Most methods return modified copies",
    "text": "Most methods return modified copies\nAs you may have noticed, the stack() and unstack() methods do not modify the object they apply to. Instead, they work on a copy and return that copy. This is true of most methods in pandas."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#accessing-rows",
    "href": "posts/pandas/tools-pandas.html#accessing-rows",
    "title": "Tools - pandas",
    "section": "Accessing rows",
    "text": "Accessing rows\nLet‚Äôs go back to the people DataFrame:\n\n\nCode\npeople\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\nThe loc attribute lets you access rows instead of columns. The result is a Series object in which the DataFrame‚Äôs column names are mapped to row index labels:\n\n\nCode\npeople.loc[\"charles\"]\n\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\nYou can also access rows by integer location using the iloc attribute:\n\n\nCode\npeople.iloc[2]\n\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\nYou can also get a slice of rows, and this returns a DataFrame object:\n\n\nCode\npeople.iloc[1:3]\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\nFinally, you can pass a boolean array to get the matching rows:\n\n\nCode\npeople[np.array([True, False, True])]\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\nThis is most useful when combined with boolean expressions:\n\n\nCode\npeople[people[\"birthyear\"] < 1990]\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#adding-and-removing-columns",
    "href": "posts/pandas/tools-pandas.html#adding-and-removing-columns",
    "title": "Tools - pandas",
    "section": "Adding and removing columns",
    "text": "Adding and removing columns\nYou can generally treat DataFrame objects like dictionaries of Series, so the following work fine:\n\n\nCode\npeople\n\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\n\n\nCode\npeople[\"age\"] = 2018 - people[\"birthyear\"]  # adds a new column \"age\"\npeople[\"over 30\"] = people[\"age\"] > 30      # adds another column \"over 30\"\nbirthyears = people.pop(\"birthyear\")\ndel people[\"children\"]\n\npeople\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      weight\n      age\n      over 30\n    \n  \n  \n    \n      alice\n      Biking\n      68\n      33\n      True\n    \n    \n      bob\n      Dancing\n      83\n      34\n      True\n    \n    \n      charles\n      NaN\n      112\n      26\n      False\n    \n  \n\n\n\n\n\n\nCode\nbirthyears\n\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\nWhen you add a new colum, it must have the same number of rows. Missing rows are filled with NaN, and extra rows are ignored:\n\n\nCode\npeople[\"pets\"] = pd.Series({\"bob\": 0, \"charles\": 5, \"eugene\":1})  # alice is missing, eugene is ignored\npeople\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      weight\n      age\n      over 30\n      pets\n    \n  \n  \n    \n      alice\n      Biking\n      68\n      33\n      True\n      NaN\n    \n    \n      bob\n      Dancing\n      83\n      34\n      True\n      0.0\n    \n    \n      charles\n      NaN\n      112\n      26\n      False\n      5.0\n    \n  \n\n\n\n\nWhen adding a new column, it is added at the end (on the right) by default. You can also insert a column anywhere else using the insert() method:\n\n\nCode\npeople.insert(1, \"height\", [172, 181, 185])\npeople\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#assigning-new-columns",
    "href": "posts/pandas/tools-pandas.html#assigning-new-columns",
    "title": "Tools - pandas",
    "section": "Assigning new columns",
    "text": "Assigning new columns\nYou can also create new columns by calling the assign() method. Note that this returns a new DataFrame object, the original is not modified:\n\n\nCode\npeople.assign(\n    body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2,\n    has_pets = people[\"pets\"] > 0\n)\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      has_pets\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\nNote that you cannot access columns created within the same assignment:\n\n\nCode\ntry:\n    people.assign(\n        body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2,\n        overweight = people[\"body_mass_index\"] > 25\n    )\nexcept KeyError as e:\n    print(\"Key error:\", e)\n\n\nKey error: 'body_mass_index'\n\n\nThe solution is to split this assignment in two consecutive assignments:\n\n\nCode\nd6 = people.assign(body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2)\nd6.assign(overweight = d6[\"body_mass_index\"] > 25)\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      True\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\nHaving to create a temporary variable d6 is not very convenient. You may want to just chain the assigment calls, but it does not work because the people object is not actually modified by the first assignment:\n\n\nCode\ntry:\n    (people\n         .assign(body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2)\n         .assign(overweight = people[\"body_mass_index\"] > 25)\n    )\nexcept KeyError as e:\n    print(\"Key error:\", e)\n\n\nKey error: 'body_mass_index'\n\n\nBut fear not, there is a simple solution. You can pass a function to the assign() method (typically a lambda function), and this function will be called with the DataFrame as a parameter:\n\n\nCode\n(people\n     .assign(body_mass_index = lambda df: df[\"weight\"] / (df[\"height\"] / 100) ** 2)\n     .assign(overweight = lambda df: df[\"body_mass_index\"] > 25)\n)\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      True\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\nProblem solved!"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#evaluating-an-expression",
    "href": "posts/pandas/tools-pandas.html#evaluating-an-expression",
    "title": "Tools - pandas",
    "section": "Evaluating an expression",
    "text": "Evaluating an expression\nA great feature supported by pandas is expression evaluation. This relies on the numexpr library which must be installed.\n\n\nCode\npeople.eval(\"weight / (height/100) ** 2 > 25\")\n\n\nalice      False\nbob         True\ncharles     True\ndtype: bool\n\n\nAssignment expressions are also supported. Let‚Äôs set inplace=True to directly modify the DataFrame rather than getting a modified copy:\n\n\nCode\npeople.eval(\"body_mass_index = weight / (height/100) ** 2\", inplace=True)\npeople\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n    \n  \n\n\n\n\nYou can use a local or global variable in an expression by prefixing it with '@':\n\n\nCode\noverweight_threshold = 30\npeople.eval(\"overweight = body_mass_index > @overweight_threshold\", inplace=True)\npeople\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#querying-a-dataframe",
    "href": "posts/pandas/tools-pandas.html#querying-a-dataframe",
    "title": "Tools - pandas",
    "section": "Querying a DataFrame",
    "text": "Querying a DataFrame\nThe query() method lets you filter a DataFrame based on a query expression:\n\n\nCode\npeople.query(\"age > 30 and pets == 0\")\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#sorting-a-dataframe",
    "href": "posts/pandas/tools-pandas.html#sorting-a-dataframe",
    "title": "Tools - pandas",
    "section": "Sorting a DataFrame",
    "text": "Sorting a DataFrame\nYou can sort a DataFrame by calling its sort_index method. By default it sorts the rows by their index label, in ascending order, but let‚Äôs reverse the order:\n\n\nCode\npeople.sort_index(ascending=False)\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n  \n\n\n\n\nNote that sort_index returned a sorted copy of the DataFrame. To modify people directly, we can set the inplace argument to True. Also, we can sort the columns instead of the rows by setting axis=1:\n\n\nCode\npeople.sort_index(axis=1, inplace=True)\npeople\n\n\n\n\n\n\n  \n    \n      \n      age\n      body_mass_index\n      height\n      hobby\n      over 30\n      overweight\n      pets\n      weight\n    \n  \n  \n    \n      alice\n      33\n      22.985398\n      172\n      Biking\n      True\n      False\n      NaN\n      68\n    \n    \n      bob\n      34\n      25.335002\n      181\n      Dancing\n      True\n      False\n      0.0\n      83\n    \n    \n      charles\n      26\n      32.724617\n      185\n      NaN\n      False\n      True\n      5.0\n      112\n    \n  \n\n\n\n\nTo sort the DataFrame by the values instead of the labels, we can use sort_values and specify the column to sort by:\n\n\nCode\npeople.sort_values(by=\"age\", inplace=True)\npeople\n\n\n\n\n\n\n  \n    \n      \n      age\n      body_mass_index\n      height\n      hobby\n      over 30\n      overweight\n      pets\n      weight\n    \n  \n  \n    \n      charles\n      26\n      32.724617\n      185\n      NaN\n      False\n      True\n      5.0\n      112\n    \n    \n      alice\n      33\n      22.985398\n      172\n      Biking\n      True\n      False\n      NaN\n      68\n    \n    \n      bob\n      34\n      25.335002\n      181\n      Dancing\n      True\n      False\n      0.0\n      83"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#plotting-a-dataframe",
    "href": "posts/pandas/tools-pandas.html#plotting-a-dataframe",
    "title": "Tools - pandas",
    "section": "Plotting a DataFrame",
    "text": "Plotting a DataFrame\nJust like for Series, pandas makes it easy to draw nice graphs based on a DataFrame.\nFor example, it is trivial to create a line plot from a DataFrame‚Äôs data by calling its plot method:\n\n\nCode\npeople.plot(kind = \"line\", x = \"body_mass_index\", y = [\"height\", \"weight\"])\nplt.show()\n\n\n\n\n\nYou can pass extra arguments supported by matplotlib‚Äôs functions. For example, we can create scatterplot and pass it a list of sizes using the s argument of matplotlib‚Äôs scatter() function:\n\n\nCode\npeople.plot(kind = \"scatter\", x = \"height\", y = \"weight\", s=[40, 120, 200])\nplt.show()\n\n\n\n\n\nAgain, there are way too many options to list here: the best option is to scroll through the Visualization page in pandas‚Äô documentation, find the plot you are interested in and look at the example code."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#operations-on-dataframes",
    "href": "posts/pandas/tools-pandas.html#operations-on-dataframes",
    "title": "Tools - pandas",
    "section": "Operations on DataFrames",
    "text": "Operations on DataFrames\nAlthough DataFrames do not try to mimick NumPy arrays, there are a few similarities. Let‚Äôs create a DataFrame to demonstrate this:\n\n\nCode\ngrades_array = np.array([[8,8,9],[10,9,9],[4, 8, 2], [9, 10, 10]])\ngrades = pd.DataFrame(grades_array, columns=[\"sep\", \"oct\", \"nov\"], index=[\"alice\",\"bob\",\"charles\",\"darwin\"])\ngrades\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      8\n      8\n      9\n    \n    \n      bob\n      10\n      9\n      9\n    \n    \n      charles\n      4\n      8\n      2\n    \n    \n      darwin\n      9\n      10\n      10\n    \n  \n\n\n\n\nYou can apply NumPy mathematical functions on a DataFrame: the function is applied to all values:\n\n\nCode\nnp.sqrt(grades)\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      2.828427\n      2.828427\n      3.000000\n    \n    \n      bob\n      3.162278\n      3.000000\n      3.000000\n    \n    \n      charles\n      2.000000\n      2.828427\n      1.414214\n    \n    \n      darwin\n      3.000000\n      3.162278\n      3.162278\n    \n  \n\n\n\n\nSimilarly, adding a single value to a DataFrame will add that value to all elements in the DataFrame. This is called broadcasting:\n\n\nCode\ngrades + 1\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      9\n      9\n      10\n    \n    \n      bob\n      11\n      10\n      10\n    \n    \n      charles\n      5\n      9\n      3\n    \n    \n      darwin\n      10\n      11\n      11\n    \n  \n\n\n\n\nOf course, the same is true for all other binary operations, including arithmetic (*,/,**‚Ä¶) and conditional (>, ==‚Ä¶) operations:\n\n\nCode\ngrades >= 5\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      True\n      True\n      True\n    \n    \n      bob\n      True\n      True\n      True\n    \n    \n      charles\n      False\n      True\n      False\n    \n    \n      darwin\n      True\n      True\n      True\n    \n  \n\n\n\n\nAggregation operations, such as computing the max, the sum or the mean of a DataFrame, apply to each column, and you get back a Series object:\n\n\nCode\ngrades.mean()\n\n\nsep    7.75\noct    8.75\nnov    7.50\ndtype: float64\n\n\nThe all method is also an aggregation operation: it checks whether all values are True or not. Let‚Äôs see during which months all students got a grade greater than 5:\n\n\nCode\n(grades > 5).all()\n\n\nsep    False\noct     True\nnov    False\ndtype: bool\n\n\nMost of these functions take an optional axis parameter which lets you specify along which axis of the DataFrame you want the operation executed. The default is axis=0, meaning that the operation is executed vertically (on each column). You can set axis=1 to execute the operation horizontally (on each row). For example, let‚Äôs find out which students had all grades greater than 5:\n\n\nCode\n(grades > 5).all(axis = 1)\n\n\nalice       True\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nThe any method returns True if any value is True. Let‚Äôs see who got at least one grade 10:\n\n\nCode\n(grades == 10).any(axis = 1)\n\n\nalice      False\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nIf you add a Series object to a DataFrame (or execute any other binary operation), pandas attempts to broadcast the operation to all rows in the DataFrame. This only works if the Series has the same size as the DataFrames rows. For example, let‚Äôs subtract the mean of the DataFrame (a Series object) from the DataFrame:\n\n\nCode\ngrades - grades.mean()  # equivalent to: grades - [7.75, 8.75, 7.50]\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      0.25\n      -0.75\n      1.5\n    \n    \n      bob\n      2.25\n      0.25\n      1.5\n    \n    \n      charles\n      -3.75\n      -0.75\n      -5.5\n    \n    \n      darwin\n      1.25\n      1.25\n      2.5\n    \n  \n\n\n\n\nWe subtracted 7.75 from all September grades, 8.75 from October grades and 7.50 from November grades. It is equivalent to subtracting this DataFrame:\n\n\nCode\npd.DataFrame([[7.75, 8.75, 7.50]]*4, index=grades.index, columns=grades.columns)\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      7.75\n      8.75\n      7.5\n    \n    \n      bob\n      7.75\n      8.75\n      7.5\n    \n    \n      charles\n      7.75\n      8.75\n      7.5\n    \n    \n      darwin\n      7.75\n      8.75\n      7.5\n    \n  \n\n\n\n\nIf you want to subtract the global mean from every grade, here is one way to do it:\n\n\nCode\ngrades - grades.values.mean() # subtracts the global mean (8.00) from all grades\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      0.0\n      0.0\n      1.0\n    \n    \n      bob\n      2.0\n      1.0\n      1.0\n    \n    \n      charles\n      -4.0\n      0.0\n      -6.0\n    \n    \n      darwin\n      1.0\n      2.0\n      2.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#automatic-alignment-1",
    "href": "posts/pandas/tools-pandas.html#automatic-alignment-1",
    "title": "Tools - pandas",
    "section": "Automatic alignment",
    "text": "Automatic alignment\nSimilar to Series, when operating on multiple DataFrames, pandas automatically aligns them by row index label, but also by column names. Let‚Äôs create a DataFrame with bonus points for each person from October to December:\n\n\nCode\nbonus_array = np.array([[0,np.nan,2],[np.nan,1,0],[0, 1, 0], [3, 3, 0]])\nbonus_points = pd.DataFrame(bonus_array, columns=[\"oct\", \"nov\", \"dec\"], index=[\"bob\",\"colin\", \"darwin\", \"charles\"])\nbonus_points\n\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      NaN\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\n\n\nCode\ngrades + bonus_points\n\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      bob\n      NaN\n      NaN\n      9.0\n      NaN\n    \n    \n      charles\n      NaN\n      5.0\n      11.0\n      NaN\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      NaN\n      11.0\n      10.0\n      NaN\n    \n  \n\n\n\n\nLooks like the addition worked in some cases but way too many elements are now empty. That‚Äôs because when aligning the DataFrames, some columns and rows were only present on one side, and thus they were considered missing on the other side (NaN). Then adding NaN to a number results in NaN, hence the result."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#handling-missing-data",
    "href": "posts/pandas/tools-pandas.html#handling-missing-data",
    "title": "Tools - pandas",
    "section": "Handling missing data",
    "text": "Handling missing data\nDealing with missing data is a frequent task when working with real life data. Pandas offers a few tools to handle missing data.\nLet‚Äôs try to fix the problem above. For example, we can decide that missing data should result in a zero, instead of NaN. We can replace all NaN values by a any value using the fillna() method:\n\n\nCode\n(grades + bonus_points).fillna(0)\n\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      bob\n      0.0\n      0.0\n      9.0\n      0.0\n    \n    \n      charles\n      0.0\n      5.0\n      11.0\n      0.0\n    \n    \n      colin\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      darwin\n      0.0\n      11.0\n      10.0\n      0.0\n    \n  \n\n\n\n\nIt‚Äôs a bit unfair that we‚Äôre setting grades to zero in September, though. Perhaps we should decide that missing grades are missing grades, but missing bonus points should be replaced by zeros:\n\n\nCode\nfixed_bonus_points = bonus_points.fillna(0)\nfixed_bonus_points.insert(0, \"sep\", 0)\nfixed_bonus_points.loc[\"alice\"] = 0\ngrades + fixed_bonus_points\n\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      NaN\n      9.0\n      8.0\n      8.0\n    \n    \n      bob\n      NaN\n      9.0\n      9.0\n      10.0\n    \n    \n      charles\n      NaN\n      5.0\n      11.0\n      4.0\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      NaN\n      11.0\n      10.0\n      9.0\n    \n  \n\n\n\n\nThat‚Äôs much better: although we made up some data, we have not been too unfair.\nAnother way to handle missing data is to interpolate. Let‚Äôs look at the bonus_points DataFrame again:\n\n\nCode\nbonus_points\n\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      NaN\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\nNow let‚Äôs call the interpolate method. By default, it interpolates vertically (axis=0), so let‚Äôs tell it to interpolate horizontally (axis=1).\n\n\nCode\nbonus_points.interpolate(axis=1)\n\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      1.0\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\nBob had 0 bonus points in October, and 2 in December. When we interpolate for November, we get the mean: 1 bonus point. Colin had 1 bonus point in November, but we do not know how many bonus points he had in September, so we cannot interpolate, this is why there is still a missing value in October after interpolation. To fix this, we can set the September bonus points to 0 before interpolation.\n\n\nCode\nbetter_bonus_points = bonus_points.copy()\nbetter_bonus_points.insert(0, \"sep\", 0)\nbetter_bonus_points.loc[\"alice\"] = 0\nbetter_bonus_points = better_bonus_points.interpolate(axis=1)\nbetter_bonus_points\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      0.0\n      1.0\n      2.0\n    \n    \n      colin\n      0.0\n      0.5\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      0.0\n      3.0\n      3.0\n      0.0\n    \n    \n      alice\n      0.0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\nGreat, now we have reasonable bonus points everywhere. Let‚Äôs find out the final grades:\n\n\nCode\ngrades + better_bonus_points\n\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      NaN\n      9.0\n      8.0\n      8.0\n    \n    \n      bob\n      NaN\n      10.0\n      9.0\n      10.0\n    \n    \n      charles\n      NaN\n      5.0\n      11.0\n      4.0\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      NaN\n      11.0\n      10.0\n      9.0\n    \n  \n\n\n\n\nIt is slightly annoying that the September column ends up on the right. This is because the DataFrames we are adding do not have the exact same columns (the grades DataFrame is missing the \"dec\" column), so to make things predictable, pandas orders the final columns alphabetically. To fix this, we can simply add the missing column before adding:\n\n\nCode\ngrades[\"dec\"] = np.nan\nfinal_grades = grades + better_bonus_points\nfinal_grades\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n      NaN\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n      NaN\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n      NaN\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0\n      NaN\n    \n  \n\n\n\n\nThere‚Äôs not much we can do about December and Colin: it‚Äôs bad enough that we are making up bonus points, but we can‚Äôt reasonably make up grades (well I guess some teachers probably do). So let‚Äôs call the dropna() method to get rid of rows that are full of NaNs:\n\n\nCode\nfinal_grades_clean = final_grades.dropna(how=\"all\")\nfinal_grades_clean\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n      NaN\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n      NaN\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n      NaN\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0\n      NaN\n    \n  \n\n\n\n\nNow let‚Äôs remove columns that are full of NaNs by setting the axis argument to 1:\n\n\nCode\nfinal_grades_clean = final_grades_clean.dropna(axis=1, how=\"all\")\nfinal_grades_clean\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#aggregating-with-groupby",
    "href": "posts/pandas/tools-pandas.html#aggregating-with-groupby",
    "title": "Tools - pandas",
    "section": "Aggregating with groupby",
    "text": "Aggregating with groupby\nSimilar to the SQL language, pandas allows grouping your data into groups to run calculations over each group.\nFirst, let‚Äôs add some extra data about each person so we can group them, and let‚Äôs go back to the final_grades DataFrame so we can see how NaN values are handled:\n\n\nCode\nfinal_grades[\"hobby\"] = [\"Biking\", \"Dancing\", np.nan, \"Dancing\", \"Biking\"]\nfinal_grades\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n      hobby\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n      NaN\n      Biking\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n      NaN\n      Dancing\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n      NaN\n      NaN\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n      Dancing\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0\n      NaN\n      Biking\n    \n  \n\n\n\n\nNow let‚Äôs group data in this DataFrame by hobby:\n\n\nCode\ngrouped_grades = final_grades.groupby(\"hobby\")\ngrouped_grades\n\n\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f697dab7310>\n\n\nWe are ready to compute the average grade per hobby:\n\n\nCode\ngrouped_grades.mean()\n\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n    \n      hobby\n      \n      \n      \n      \n    \n  \n  \n    \n      Biking\n      8.5\n      9.0\n      10.0\n      NaN\n    \n    \n      Dancing\n      10.0\n      9.0\n      10.0\n      NaN\n    \n  \n\n\n\n\nThat was easy! Note that the NaN values have simply been skipped when computing the means."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#pivot-tables",
    "href": "posts/pandas/tools-pandas.html#pivot-tables",
    "title": "Tools - pandas",
    "section": "Pivot tables",
    "text": "Pivot tables\nPandas supports spreadsheet-like pivot tables that allow quick data summarization. To illustrate this, let‚Äôs create a simple DataFrame:\n\n\nCode\nbonus_points\n\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      NaN\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\n\n\nCode\nmore_grades = final_grades_clean.stack().reset_index()\nmore_grades.columns = [\"name\", \"month\", \"grade\"]\nmore_grades[\"bonus\"] = [np.nan, np.nan, np.nan, 0, np.nan, 2, 3, 3, 0, 0, 1, 0]\nmore_grades\n\n\n\n\n\n\n  \n    \n      \n      name\n      month\n      grade\n      bonus\n    \n  \n  \n    \n      0\n      alice\n      sep\n      8.0\n      NaN\n    \n    \n      1\n      alice\n      oct\n      8.0\n      NaN\n    \n    \n      2\n      alice\n      nov\n      9.0\n      NaN\n    \n    \n      3\n      bob\n      sep\n      10.0\n      0.0\n    \n    \n      4\n      bob\n      oct\n      9.0\n      NaN\n    \n    \n      5\n      bob\n      nov\n      10.0\n      2.0\n    \n    \n      6\n      charles\n      sep\n      4.0\n      3.0\n    \n    \n      7\n      charles\n      oct\n      11.0\n      3.0\n    \n    \n      8\n      charles\n      nov\n      5.0\n      0.0\n    \n    \n      9\n      darwin\n      sep\n      9.0\n      0.0\n    \n    \n      10\n      darwin\n      oct\n      10.0\n      1.0\n    \n    \n      11\n      darwin\n      nov\n      11.0\n      0.0\n    \n  \n\n\n\n\nNow we can call the pd.pivot_table() function for this DataFrame, asking to group by the name column. By default, pivot_table() computes the mean of each numeric column:\n\n\nCode\npd.pivot_table(more_grades, index=\"name\")\n\n\n\n\n\n\n  \n    \n      \n      bonus\n      grade\n    \n    \n      name\n      \n      \n    \n  \n  \n    \n      alice\n      NaN\n      8.333333\n    \n    \n      bob\n      1.000000\n      9.666667\n    \n    \n      charles\n      2.000000\n      6.666667\n    \n    \n      darwin\n      0.333333\n      10.000000\n    \n  \n\n\n\n\nWe can change the aggregation function by setting the aggfunc argument, and we can also specify the list of columns whose values will be aggregated:\n\n\nCode\npd.pivot_table(more_grades, index=\"name\", values=[\"grade\",\"bonus\"], aggfunc=np.max)\n\n\n\n\n\n\n  \n    \n      \n      bonus\n      grade\n    \n    \n      name\n      \n      \n    \n  \n  \n    \n      alice\n      NaN\n      9.0\n    \n    \n      bob\n      2.0\n      10.0\n    \n    \n      charles\n      3.0\n      11.0\n    \n    \n      darwin\n      1.0\n      11.0\n    \n  \n\n\n\n\nWe can also specify the columns to aggregate over horizontally, and request the grand totals for each row and column by setting margins=True:\n\n\nCode\npd.pivot_table(more_grades, index=\"name\", values=\"grade\", columns=\"month\", margins=True)\n\n\n\n\n\n\n  \n    \n      month\n      nov\n      oct\n      sep\n      All\n    \n    \n      name\n      \n      \n      \n      \n    \n  \n  \n    \n      alice\n      9.00\n      8.0\n      8.00\n      8.333333\n    \n    \n      bob\n      10.00\n      9.0\n      10.00\n      9.666667\n    \n    \n      charles\n      5.00\n      11.0\n      4.00\n      6.666667\n    \n    \n      darwin\n      11.00\n      10.0\n      9.00\n      10.000000\n    \n    \n      All\n      8.75\n      9.5\n      7.75\n      8.666667\n    \n  \n\n\n\n\nFinally, we can specify multiple index or column names, and pandas will create multi-level indices:\n\n\nCode\npd.pivot_table(more_grades, index=(\"name\", \"month\"), margins=True)\n\n\n\n\n\n\n  \n    \n      \n      \n      bonus\n      grade\n    \n    \n      name\n      month\n      \n      \n    \n  \n  \n    \n      alice\n      nov\n      NaN\n      9.00\n    \n    \n      oct\n      NaN\n      8.00\n    \n    \n      sep\n      NaN\n      8.00\n    \n    \n      bob\n      nov\n      2.000\n      10.00\n    \n    \n      oct\n      NaN\n      9.00\n    \n    \n      sep\n      0.000\n      10.00\n    \n    \n      charles\n      nov\n      0.000\n      5.00\n    \n    \n      oct\n      3.000\n      11.00\n    \n    \n      sep\n      3.000\n      4.00\n    \n    \n      darwin\n      nov\n      0.000\n      11.00\n    \n    \n      oct\n      1.000\n      10.00\n    \n    \n      sep\n      0.000\n      9.00\n    \n    \n      All\n      \n      1.125\n      8.75"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#overview-functions",
    "href": "posts/pandas/tools-pandas.html#overview-functions",
    "title": "Tools - pandas",
    "section": "Overview functions",
    "text": "Overview functions\nWhen dealing with large DataFrames, it is useful to get a quick overview of its content. Pandas offers a few functions for this. First, let‚Äôs create a large DataFrame with a mix of numeric values, missing values and text values. Notice how Jupyter displays only the corners of the DataFrame:\n\n\nCode\nmuch_data = np.fromfunction(lambda x,y: (x+y*y)%17*11, (10000, 26))\nlarge_df = pd.DataFrame(much_data, columns=list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nlarge_df[large_df % 16 == 0] = np.nan\nlarge_df.insert(3,\"some_text\", \"Blabla\")\nlarge_df\n\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      some_text\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      0\n      NaN\n      11.0\n      44.0\n      Blabla\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n      ...\n      11.0\n      NaN\n      11.0\n      44.0\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n    \n    \n      1\n      11.0\n      22.0\n      55.0\n      Blabla\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n      ...\n      22.0\n      11.0\n      22.0\n      55.0\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n    \n    \n      2\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      3\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n    \n      4\n      44.0\n      55.0\n      88.0\n      Blabla\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n      ...\n      55.0\n      44.0\n      55.0\n      88.0\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9995\n      NaN\n      NaN\n      33.0\n      Blabla\n      88.0\n      165.0\n      77.0\n      11.0\n      154.0\n      132.0\n      ...\n      NaN\n      NaN\n      NaN\n      33.0\n      88.0\n      165.0\n      77.0\n      11.0\n      154.0\n      132.0\n    \n    \n      9996\n      NaN\n      11.0\n      44.0\n      Blabla\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n      ...\n      11.0\n      NaN\n      11.0\n      44.0\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n    \n    \n      9997\n      11.0\n      22.0\n      55.0\n      Blabla\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n      ...\n      22.0\n      11.0\n      22.0\n      55.0\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n    \n    \n      9998\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      9999\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n  \n\n10000 rows √ó 27 columns\n\n\n\nThe head() method returns the top 5 rows:\n\n\nCode\nlarge_df.head()\n\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      some_text\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      0\n      NaN\n      11.0\n      44.0\n      Blabla\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n      ...\n      11.0\n      NaN\n      11.0\n      44.0\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n    \n    \n      1\n      11.0\n      22.0\n      55.0\n      Blabla\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n      ...\n      22.0\n      11.0\n      22.0\n      55.0\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n    \n    \n      2\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      3\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n    \n      4\n      44.0\n      55.0\n      88.0\n      Blabla\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n      ...\n      55.0\n      44.0\n      55.0\n      88.0\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n    \n  \n\n5 rows √ó 27 columns\n\n\n\nOf course there‚Äôs also a tail() function to view the bottom 5 rows. You can pass the number of rows you want:\n\n\nCode\nlarge_df.tail(n=2)\n\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      some_text\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      9998\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      9999\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n  \n\n2 rows √ó 27 columns\n\n\n\nThe info() method prints out a summary of each columns contents:\n\n\nCode\nlarge_df.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 27 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   A          8823 non-null   float64\n 1   B          8824 non-null   float64\n 2   C          8824 non-null   float64\n 3   some_text  10000 non-null  object \n 4   D          8824 non-null   float64\n 5   E          8822 non-null   float64\n 6   F          8824 non-null   float64\n 7   G          8824 non-null   float64\n 8   H          8822 non-null   float64\n 9   I          8823 non-null   float64\n 10  J          8823 non-null   float64\n 11  K          8822 non-null   float64\n 12  L          8824 non-null   float64\n 13  M          8824 non-null   float64\n 14  N          8822 non-null   float64\n 15  O          8824 non-null   float64\n 16  P          8824 non-null   float64\n 17  Q          8824 non-null   float64\n 18  R          8823 non-null   float64\n 19  S          8824 non-null   float64\n 20  T          8824 non-null   float64\n 21  U          8824 non-null   float64\n 22  V          8822 non-null   float64\n 23  W          8824 non-null   float64\n 24  X          8824 non-null   float64\n 25  Y          8822 non-null   float64\n 26  Z          8823 non-null   float64\ndtypes: float64(26), object(1)\nmemory usage: 2.1+ MB\n\n\nFinally, the describe() method gives a nice overview of the main aggregated values over each column: * count: number of non-null (not NaN) values * mean: mean of non-null values * std: standard deviation of non-null values * min: minimum of non-null values * 25%, 50%, 75%: 25th, 50th and 75th percentile of non-null values * max: maximum of non-null values\n\n\nCode\nlarge_df.describe()\n\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n      E\n      F\n      G\n      H\n      I\n      J\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      count\n      8823.000000\n      8824.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8823.000000\n      8823.000000\n      ...\n      8824.000000\n      8823.000000\n      8824.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8823.000000\n    \n    \n      mean\n      87.977559\n      87.972575\n      87.987534\n      88.012466\n      87.983791\n      88.007480\n      87.977561\n      88.000000\n      88.022441\n      88.022441\n      ...\n      87.972575\n      87.977559\n      87.972575\n      87.987534\n      88.012466\n      87.983791\n      88.007480\n      87.977561\n      88.000000\n      88.022441\n    \n    \n      std\n      47.535911\n      47.535523\n      47.521679\n      47.521679\n      47.535001\n      47.519371\n      47.529755\n      47.536879\n      47.535911\n      47.535911\n      ...\n      47.535523\n      47.535911\n      47.535523\n      47.521679\n      47.521679\n      47.535001\n      47.519371\n      47.529755\n      47.536879\n      47.535911\n    \n    \n      min\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      ...\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n    \n    \n      25%\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      ...\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n    \n    \n      50%\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      ...\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n    \n    \n      75%\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      ...\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n    \n    \n      max\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      ...\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n    \n  \n\n8 rows √ó 26 columns"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#saving",
    "href": "posts/pandas/tools-pandas.html#saving",
    "title": "Tools - pandas",
    "section": "Saving",
    "text": "Saving\nLet‚Äôs save it to CSV, HTML and JSON:\n\n\nCode\nmy_df.to_csv(\"my_df.csv\")\nmy_df.to_html(\"my_df.html\")\nmy_df.to_json(\"my_df.json\")\n\n\nDone! Let‚Äôs take a peek at what was saved:\n\n\nCode\nfor filename in (\"my_df.csv\", \"my_df.html\", \"my_df.json\"):\n    print(\"#\", filename)\n    with open(filename, \"rt\") as f:\n        print(f.read())\n        print()\n\n\n# my_df.csv\n,hobby,weight,birthyear,children\nalice,Biking,68.5,1985,\nbob,Dancing,83.1,1984,3.0\n\n\n# my_df.html\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hobby</th>\n      <th>weight</th>\n      <th>birthyear</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>alice</th>\n      <td>Biking</td>\n      <td>68.5</td>\n      <td>1985</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>bob</th>\n      <td>Dancing</td>\n      <td>83.1</td>\n      <td>1984</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n\n# my_df.json\n{\"hobby\":{\"alice\":\"Biking\",\"bob\":\"Dancing\"},\"weight\":{\"alice\":68.5,\"bob\":83.1},\"birthyear\":{\"alice\":1985,\"bob\":1984},\"children\":{\"alice\":null,\"bob\":3.0}}\n\n\n\nNote that the index is saved as the first column (with no name) in a CSV file, as <th> tags in HTML and as keys in JSON.\nSaving to other formats works very similarly, but some formats require extra libraries to be installed. For example, saving to Excel requires the openpyxl library:\n\n\nCode\ntry:\n    my_df.to_excel(\"my_df.xlsx\", sheet_name='People')\nexcept ImportError as e:\n    print(e)\n\n\nNo module named 'openpyxl'"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#loading",
    "href": "posts/pandas/tools-pandas.html#loading",
    "title": "Tools - pandas",
    "section": "Loading",
    "text": "Loading\nNow let‚Äôs load our CSV file back into a DataFrame:\n\n\nCode\nmy_df_loaded = pd.read_csv(\"my_df.csv\", index_col=0)\nmy_df_loaded\n\n\n\n\n\n\n  \n    \n      \n      hobby\n      weight\n      birthyear\n      children\n    \n  \n  \n    \n      alice\n      Biking\n      68.5\n      1985\n      NaN\n    \n    \n      bob\n      Dancing\n      83.1\n      1984\n      3.0\n    \n  \n\n\n\n\nAs you might guess, there are similar read_json, read_html, read_excel functions as well. We can also read data straight from the Internet. For example, let‚Äôs load the top 1,000 U.S. cities from github:\n\n\nCode\nus_cities = None\ntry:\n    csv_url = \"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\"\n    us_cities = pd.read_csv(csv_url, index_col=0)\n    us_cities = us_cities.head()\nexcept IOError as e:\n    print(e)\nus_cities\n\n\n\n\n\n\n  \n    \n      \n      State\n      Population\n      lat\n      lon\n    \n    \n      City\n      \n      \n      \n      \n    \n  \n  \n    \n      Marysville\n      Washington\n      63269\n      48.051764\n      -122.177082\n    \n    \n      Perris\n      California\n      72326\n      33.782519\n      -117.228648\n    \n    \n      Cleveland\n      Ohio\n      390113\n      41.499320\n      -81.694361\n    \n    \n      Worcester\n      Massachusetts\n      182544\n      42.262593\n      -71.802293\n    \n    \n      Columbia\n      South Carolina\n      133358\n      34.000710\n      -81.034814\n    \n  \n\n\n\n\nThere are more options available, in particular regarding datetime format. Check out the documentation for more details."
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#sql-like-joins",
    "href": "posts/pandas/tools-pandas.html#sql-like-joins",
    "title": "Tools - pandas",
    "section": "SQL-like joins",
    "text": "SQL-like joins\nOne powerful feature of pandas is it‚Äôs ability to perform SQL-like joins on DataFrames. Various types of joins are supported: inner joins, left/right outer joins and full joins. To illustrate this, let‚Äôs start by creating a couple simple DataFrames:\n\n\nCode\ncity_loc = pd.DataFrame(\n    [\n        [\"CA\", \"San Francisco\", 37.781334, -122.416728],\n        [\"NY\", \"New York\", 40.705649, -74.008344],\n        [\"FL\", \"Miami\", 25.791100, -80.320733],\n        [\"OH\", \"Cleveland\", 41.473508, -81.739791],\n        [\"UT\", \"Salt Lake City\", 40.755851, -111.896657]\n    ], columns=[\"state\", \"city\", \"lat\", \"lng\"])\ncity_loc\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n    \n  \n\n\n\n\n\n\nCode\ncity_pop = pd.DataFrame(\n    [\n        [808976, \"San Francisco\", \"California\"],\n        [8363710, \"New York\", \"New-York\"],\n        [413201, \"Miami\", \"Florida\"],\n        [2242193, \"Houston\", \"Texas\"]\n    ], index=[3,4,5,6], columns=[\"population\", \"city\", \"state\"])\ncity_pop\n\n\n\n\n\n\n  \n    \n      \n      population\n      city\n      state\n    \n  \n  \n    \n      3\n      808976\n      San Francisco\n      California\n    \n    \n      4\n      8363710\n      New York\n      New-York\n    \n    \n      5\n      413201\n      Miami\n      Florida\n    \n    \n      6\n      2242193\n      Houston\n      Texas\n    \n  \n\n\n\n\nNow let‚Äôs join these DataFrames using the merge() function:\n\n\nCode\npd.merge(left=city_loc, right=city_pop, on=\"city\")\n\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201\n      Florida\n    \n  \n\n\n\n\nNote that both DataFrames have a column named state, so in the result they got renamed to state_x and state_y.\nAlso, note that Cleveland, Salt Lake City and Houston were dropped because they don‚Äôt exist in both DataFrames. This is the equivalent of a SQL INNER JOIN. If you want a FULL OUTER JOIN, where no city gets dropped and NaN values are added, you must specify how=\"outer\":\n\n\nCode\nall_cities = pd.merge(left=city_loc, right=city_pop, on=\"city\", how=\"outer\")\nall_cities\n\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976.0\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710.0\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201.0\n      Florida\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n      NaN\n    \n    \n      5\n      NaN\n      Houston\n      NaN\n      NaN\n      2242193.0\n      Texas\n    \n  \n\n\n\n\nOf course LEFT OUTER JOIN is also available by setting how=\"left\": only the cities present in the left DataFrame end up in the result. Similarly, with how=\"right\" only cities in the right DataFrame appear in the result. For example:\n\n\nCode\npd.merge(left=city_loc, right=city_pop, on=\"city\", how=\"right\")\n\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201\n      Florida\n    \n    \n      3\n      NaN\n      Houston\n      NaN\n      NaN\n      2242193\n      Texas\n    \n  \n\n\n\n\nIf the key to join on is actually in one (or both) DataFrame‚Äôs index, you must use left_index=True and/or right_index=True. If the key column names differ, you must use left_on and right_on. For example:\n\n\nCode\ncity_pop2 = city_pop.copy()\ncity_pop2.columns = [\"population\", \"name\", \"state\"]\npd.merge(left=city_loc, right=city_pop2, left_on=\"city\", right_on=\"name\")\n\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      name\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976\n      San Francisco\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710\n      New York\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201\n      Miami\n      Florida"
  },
  {
    "objectID": "posts/pandas/tools-pandas.html#concatenation",
    "href": "posts/pandas/tools-pandas.html#concatenation",
    "title": "Tools - pandas",
    "section": "Concatenation",
    "text": "Concatenation\nRather than joining DataFrames, we may just want to concatenate them. That‚Äôs what concat() is for:\n\n\nCode\nresult_concat = pd.concat([city_loc, city_pop])\nresult_concat\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n    \n    \n      3\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n    \n      4\n      New-York\n      New York\n      NaN\n      NaN\n      8363710.0\n    \n    \n      5\n      Florida\n      Miami\n      NaN\n      NaN\n      413201.0\n    \n    \n      6\n      Texas\n      Houston\n      NaN\n      NaN\n      2242193.0\n    \n  \n\n\n\n\nNote that this operation aligned the data horizontally (by columns) but not vertically (by rows). In this example, we end up with multiple rows having the same index (eg. 3). Pandas handles this rather gracefully:\n\n\nCode\nresult_concat.loc[3]\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      3\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n  \n\n\n\n\nOr you can tell pandas to just ignore the index:\n\n\nCode\npd.concat([city_loc, city_pop], ignore_index=True)\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n    \n    \n      5\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n    \n      6\n      New-York\n      New York\n      NaN\n      NaN\n      8363710.0\n    \n    \n      7\n      Florida\n      Miami\n      NaN\n      NaN\n      413201.0\n    \n    \n      8\n      Texas\n      Houston\n      NaN\n      NaN\n      2242193.0\n    \n  \n\n\n\n\nNotice that when a column does not exist in a DataFrame, it acts as if it was filled with NaN values. If we set join=\"inner\", then only columns that exist in both DataFrames are returned:\n\n\nCode\npd.concat([city_loc, city_pop], join=\"inner\")\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n    \n    \n      1\n      NY\n      New York\n    \n    \n      2\n      FL\n      Miami\n    \n    \n      3\n      OH\n      Cleveland\n    \n    \n      4\n      UT\n      Salt Lake City\n    \n    \n      3\n      California\n      San Francisco\n    \n    \n      4\n      New-York\n      New York\n    \n    \n      5\n      Florida\n      Miami\n    \n    \n      6\n      Texas\n      Houston\n    \n  \n\n\n\n\nYou can concatenate DataFrames horizontally instead of vertically by setting axis=1:\n\n\nCode\npd.concat([city_loc, city_pop], axis=1)\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n      city\n      state\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      808976.0\n      San Francisco\n      California\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      8363710.0\n      New York\n      New-York\n    \n    \n      5\n      NaN\n      NaN\n      NaN\n      NaN\n      413201.0\n      Miami\n      Florida\n    \n    \n      6\n      NaN\n      NaN\n      NaN\n      NaN\n      2242193.0\n      Houston\n      Texas\n    \n  \n\n\n\n\nIn this case it really does not make much sense because the indices do not align well (eg. Cleveland and San Francisco end up on the same row, because they shared the index label 3). So let‚Äôs reindex the DataFrames by city name before concatenating:\n\n\nCode\npd.concat([city_loc.set_index(\"city\"), city_pop.set_index(\"city\")], axis=1)\n\n\n\n\n\n\n  \n    \n      \n      state\n      lat\n      lng\n      population\n      state\n    \n    \n      city\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      San Francisco\n      CA\n      37.781334\n      -122.416728\n      808976.0\n      California\n    \n    \n      New York\n      NY\n      40.705649\n      -74.008344\n      8363710.0\n      New-York\n    \n    \n      Miami\n      FL\n      25.791100\n      -80.320733\n      413201.0\n      Florida\n    \n    \n      Cleveland\n      OH\n      41.473508\n      -81.739791\n      NaN\n      NaN\n    \n    \n      Salt Lake City\n      UT\n      40.755851\n      -111.896657\n      NaN\n      NaN\n    \n    \n      Houston\n      NaN\n      NaN\n      NaN\n      2242193.0\n      Texas\n    \n  \n\n\n\n\nThis looks a lot like a FULL OUTER JOIN, except that the state columns were not renamed to state_x and state_y, and the city column is now the index.\nThe append() method is a useful shorthand for concatenating DataFrames vertically:\n\n\nCode\ncity_loc.append(city_pop)\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n    \n    \n      3\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n    \n      4\n      New-York\n      New York\n      NaN\n      NaN\n      8363710.0\n    \n    \n      5\n      Florida\n      Miami\n      NaN\n      NaN\n      413201.0\n    \n    \n      6\n      Texas\n      Houston\n      NaN\n      NaN\n      2242193.0\n    \n  \n\n\n\n\nAs always in pandas, the append() method does not actually modify city_loc: it works on a copy and returns the modified copy."
  },
  {
    "objectID": "posts/qmd_computations/computations.html",
    "href": "posts/qmd_computations/computations.html",
    "title": "Quarto Computations",
    "section": "",
    "text": "Code\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])"
  },
  {
    "objectID": "posts/qmd_computations/computations.html#matplotlib",
    "href": "posts/qmd_computations/computations.html#matplotlib",
    "title": "Quarto Computations",
    "section": "Matplotlib",
    "text": "Matplotlib\n\n\nCode\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)"
  },
  {
    "objectID": "posts/qmd_computations/computations.html#plotly",
    "href": "posts/qmd_computations/computations.html#plotly",
    "title": "Quarto Computations",
    "section": "Plotly",
    "text": "Plotly\n\n\nCode\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n\n\nModuleNotFoundError: No module named 'plotly'"
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html",
    "href": "posts/qmd_titanic/titanic.html",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "",
    "text": "This notebook follows the fastai style conventions."
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html#importnig-packages",
    "href": "posts/qmd_titanic/titanic.html#importnig-packages",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "Importnig packages",
    "text": "Importnig packages\n\nimport pandas as pd\n\n\nimport numpy as np\n\n\nfrom scipy import stats, integrate\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(color_codes=True)\n%pylab inline\n\nPopulating the interactive namespace from numpy and matplotlib"
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html#problem-statement",
    "href": "posts/qmd_titanic/titanic.html#problem-statement",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nWhat is the dependent variable and what are the factors in this data? Who had more chances of survival, what are the factors?\nData exploration section will investigate the dependent variable ‚ÄòSurvived‚Äô and understand the relationship of factors such as being a female, or child, or being in a certain class, or having sibling/spouse, parent/child affect the survival rate. We will also come up with a hypothesis and test it.\n\ndata = pd.read_csv('Titanic.csv')\n\n\ndata.head()\n\n\n\n\n  \n    \n      \n      PassengerId\n      Survived\n      Pclass\n      Name\n      Sex\n      Age\n      SibSp\n      Parch\n      Ticket\n      Fare\n      Cabin\n      Embarked\n    \n  \n  \n    \n      0\n      1\n      0\n      3\n      Braund, Mr. Owen Harris\n      male\n      22.0\n      1\n      0\n      A/5 21171\n      7.2500\n      NaN\n      S\n    \n    \n      1\n      2\n      1\n      1\n      Cumings, Mrs. John Bradley (Florence Briggs Th...\n      female\n      38.0\n      1\n      0\n      PC 17599\n      71.2833\n      C85\n      C\n    \n    \n      2\n      3\n      1\n      3\n      Heikkinen, Miss. Laina\n      female\n      26.0\n      0\n      0\n      STON/O2. 3101282\n      7.9250\n      NaN\n      S\n    \n    \n      3\n      4\n      1\n      1\n      Futrelle, Mrs. Jacques Heath (Lily May Peel)\n      female\n      35.0\n      1\n      0\n      113803\n      53.1000\n      C123\n      S\n    \n    \n      4\n      5\n      0\n      3\n      Allen, Mr. William Henry\n      male\n      35.0\n      0\n      0\n      373450\n      8.0500\n      NaN\n      S"
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html#data-wrangling",
    "href": "posts/qmd_titanic/titanic.html#data-wrangling",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\ndata.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass         891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 66.2+ KB\n\n\nThe titanic data given has 891 rows, most of the columns have 891 rows except Age, Cabin and Embarked.\n\nprint(data['Cabin'].describe())\nprint(data['Embarked'].describe())\nprint(data['Age'].describe())\n\ncount         204\nunique        147\ntop       B96 B98\nfreq            4\nName: Cabin, dtype: object\ncount     889\nunique      3\ntop         S\nfreq      644\nName: Embarked, dtype: object\ncount    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n25%       20.125000\n50%       28.000000\n75%       38.000000\nmax       80.000000\nName: Age, dtype: float64\n\n\n\ndata['Cabin'].value_counts().plot(kind ='bar', figsize= (15,3))\nsns.plt.title('Frequency/Counts by Cabin')\n\n<matplotlib.text.Text>\n\n\n\n\n\nCabin has 147 unique values for 204 rows, Max freq is 4. It is difficult to draw conclusion on this data and since it has just 22.8% of rows, I will be dropping this column from any further analysis. Also PassengerId does not give me any useful information, so I will drop that column as well\n\ndel data['Cabin']\ndel data['PassengerId']\n\nLet us also drop the rows with missing values for Age and Embarked now\n\ndata.dropna(subset = ['Embarked', 'Age'], inplace = True)\n\n\ndata.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 712 entries, 0 to 890\nData columns (total 10 columns):\nSurvived    712 non-null int64\nPclass      712 non-null int64\nName        712 non-null object\nSex         712 non-null object\nAge         712 non-null float64\nSibSp       712 non-null int64\nParch       712 non-null int64\nTicket      712 non-null object\nFare        712 non-null float64\nEmbarked    712 non-null object\ndtypes: float64(2), int64(4), object(4)\nmemory usage: 50.1+ KB\n\n\nPclass should not be numeric, so let us update it to upper, middle and lower class. For that, we need to look at its relationship with Fare\n\nsns.barplot(x=\"Pclass\", y=\"Fare\", data=data);\nsns.plt.title('Pclass by Mean Fare')\n\n<matplotlib.text.Text>\n\n\n\n\n\nMean Fare of Pclass 1 was 88 dollars, Pclass 2 was 21.47 dollars and Pclass 3 was 13.22 dollars, so let us update the values of Pclass to ‚ÄòUpper‚Äô for Class 1, ‚ÄòMiddle‚Äô for Class 2 and ‚ÄòLower‚Äô for Class 3\n\ndata.loc[data['Pclass'] == 1, 'Pclass'] = 'Upper'\ndata.loc[data['Pclass'] == 2, 'Pclass'] = 'Middle'\ndata.loc[data['Pclass'] == 3, 'Pclass'] = 'Lower'"
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html#data-exploration",
    "href": "posts/qmd_titanic/titanic.html#data-exploration",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "Data Exploration",
    "text": "Data Exploration\n\n# Distribution of numeric variables\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(ncols=4, figsize = (15,3))\ndata['Age'].plot(kind ='hist', bins = 25, ax=ax1)\nax1.set_title('Age')\ndata['Fare'].plot(kind = 'hist', bins= 25, ax=ax2)\nax2.set_title('Fare')\ndata['Parch'].plot(kind = 'hist', ax=ax3)\nax3.set_title('Parch')\ndata['SibSp'].plot(kind = 'hist', ax=ax4)\nax4.set_title('SibSp')\n\n<matplotlib.text.Text>\n\n\n\n\n\n\n# Distribution of categorical variables\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(ncols=4, figsize = (12,3))\ndata['Sex'].value_counts().plot(kind ='bar', ax=ax1)\nax1.set_title('Sex')\ndata['Survived'].value_counts().plot(kind = 'bar', ax=ax2)\nax2.set_title('Survived')\nax2.set_xticklabels(['Perished', 'Survived'])\ndata['Pclass'].value_counts().plot(kind = 'bar', ax=ax3)\nax3.set_title('Pclass')\ndata['Embarked'].value_counts().plot(kind = 'bar', ax=ax4)\nax4.set_title('Embarked')\n\n<matplotlib.text.Text>\n\n\n\n\n\nThe above plots show the distributions of numerical and categorical columns in our data. Age ranges from 0 to 80 years with mean and mode around 25-30 years, Fare ranges from 0 to over 500 dollars, Parch and SibSp has its mode at 0 meaning most people did not travel with any parent/child or sibling/spouse, There were around 453 males and 289 females onboard, 424 perished and 288 survived. Most of the passengers were in Lower Pclass and embarked at station S.\n\nUnderstanding the dependencies of dependent and independent variables\nSince for the given data, more than 50% of the passengers perished, We will investigate the factors that survival of the passengers depend on and would like to answer questions like did females have more chance of surviving, how does age or fare affect the survival, does having a parent or child, or sibling or spouse influence survival and how does Pclass affect survival. Dependent variable is ‚ÄòSurvived‚Äô which gives 0 for rows for passengers who perished and 1 for passengers that survived. Independent variables are Sex, Pclass, Embarked, Age, Fare etc.\nThere could be other factors or variables like location of cabins or location/state(sleep or awake) of passengers at the time of the accident etc which we had limited data for and hence ave been omitted from the analysis. We also omitted rows that had missing values for ‚ÄòAge‚Äô and ‚ÄòEmbarked‚Äô so that will also skew the statistical analysis a bit.\n\n#Function to create grouped data by factors\ndef grouped_by_factors(df,factor):\n    mean_by_factor = df.groupby(factor).describe()\n    return mean_by_factor\n\nSome understanding of mean/max/std/count would be helpful for our analysis so I created a function to display statistics using groupby function. We will also be creating plots to help visualize the data.\n\n\nUnderstanding Dependent variable ‚ÄòSurvived‚Äô by numerical columns\n\n‚ÄòSurvived‚Äô by Age and Fare\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize =(12,3))\nfig1 = sns.regplot(x=\"Age\", y=\"Survived\", data=data, ax = ax1)\nfig2 = sns.regplot(x=\"Fare\", y=\"Survived\", data=data, ax = ax2)\nplt.suptitle(\"Perished vs. Survived by Age and Fare\", size=12)\nfig1.set(ylabel='Survival Rate'), fig2.set(ylabel='Survival Rate')\n\n([<matplotlib.text.Text>], [<matplotlib.text.Text>])\n\n\n\n\n\n\n\n‚ÄòSurvived‚Äô by SibSp and Parch\n\ng = sns.PairGrid(data, y_vars=[\"Survived\"], x_vars=[\"SibSp\", \"Parch\"], size=4)\ng.map(sns.barplot, color=\".4\")\ng.set(ylabel='Survival Rate')\nplt.suptitle(\"Perished vs. Survived by SibSp and Parch\", size=12)\n\n<matplotlib.text.Text>\n\n\n\n\n\n\ngrouped_by_factors(data,'Survived')\n\n\n\n\n  \n    \n      \n      \n      Age\n      Fare\n      Parch\n      SibSp\n    \n    \n      Survived\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      count\n      424.000000\n      424.000000\n      424.000000\n      424.000000\n    \n    \n      mean\n      30.626179\n      22.965456\n      0.365566\n      0.525943\n    \n    \n      std\n      14.172110\n      31.448825\n      0.878341\n      1.044760\n    \n    \n      min\n      1.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      21.000000\n      7.895800\n      0.000000\n      0.000000\n    \n    \n      50%\n      28.000000\n      11.887500\n      0.000000\n      0.000000\n    \n    \n      75%\n      39.000000\n      26.550000\n      0.000000\n      1.000000\n    \n    \n      max\n      74.000000\n      263.000000\n      6.000000\n      5.000000\n    \n    \n      1\n      count\n      288.000000\n      288.000000\n      288.000000\n      288.000000\n    \n    \n      mean\n      28.193299\n      51.647672\n      0.531250\n      0.496528\n    \n    \n      std\n      14.859146\n      70.664499\n      0.808747\n      0.732512\n    \n    \n      min\n      0.420000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      19.000000\n      13.000000\n      0.000000\n      0.000000\n    \n    \n      50%\n      28.000000\n      26.250000\n      0.000000\n      0.000000\n    \n    \n      75%\n      36.000000\n      65.000000\n      1.000000\n      1.000000\n    \n    \n      max\n      80.000000\n      512.329200\n      5.000000\n      4.000000\n    \n  \n\n\n\n\nThe data shows 424 passengers did not survive and 288 did.\nAverage age of passengers that survived was 28.2(std=14.8) years as compared to 30.62(14.17) for those who did not survive. On average, passengers who survived paid higher fare(mean=51.6 dollars) as compared to who did not(mean=22.9 dollars).\nFrom the barchart, the survival rate for those travelling with 1/2 sibling or spouse and 1/2/3 parent or children was higher than the ones that did not. The relationship of survival is not linear with the number of sibsp/parch which could be due to lack of data.\nFrom the correlation plot, Survival rate is positively correlated to Fare and negatively correlated to Age which means younger people and those who paid more had higher chances of surviving\n\n\n\nUnderstanding Dependent variable ‚ÄòSurvived‚Äô by Categorical columns\n\n‚ÄòSurvived‚Äô by Pclass\n\ngrouped_by_factors(data,'Pclass')\n\n\n\n\n  \n    \n      \n      \n      Age\n      Fare\n      Parch\n      SibSp\n      Survived\n    \n    \n      Pclass\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Lower\n      count\n      355.000000\n      355.000000\n      355.000000\n      355.000000\n      355.000000\n    \n    \n      mean\n      25.140620\n      13.229435\n      0.456338\n      0.585915\n      0.239437\n    \n    \n      std\n      12.495398\n      10.043158\n      0.971447\n      1.157303\n      0.427342\n    \n    \n      min\n      0.420000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      18.000000\n      7.775000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      50%\n      24.000000\n      8.050000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      75%\n      32.000000\n      15.741700\n      1.000000\n      1.000000\n      0.000000\n    \n    \n      max\n      74.000000\n      56.495800\n      6.000000\n      5.000000\n      1.000000\n    \n    \n      Middle\n      count\n      173.000000\n      173.000000\n      173.000000\n      173.000000\n      173.000000\n    \n    \n      mean\n      29.877630\n      21.471556\n      0.404624\n      0.427746\n      0.479769\n    \n    \n      std\n      14.001077\n      13.187429\n      0.705775\n      0.611645\n      0.501041\n    \n    \n      min\n      0.670000\n      10.500000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      23.000000\n      13.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      50%\n      29.000000\n      15.045800\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      75%\n      36.000000\n      26.000000\n      1.000000\n      1.000000\n      1.000000\n    \n    \n      max\n      70.000000\n      73.500000\n      3.000000\n      3.000000\n      1.000000\n    \n    \n      Upper\n      count\n      184.000000\n      184.000000\n      184.000000\n      184.000000\n      184.000000\n    \n    \n      mean\n      38.105543\n      88.048121\n      0.413043\n      0.456522\n      0.652174\n    \n    \n      std\n      14.778904\n      81.293524\n      0.734061\n      0.634406\n      0.477580\n    \n    \n      min\n      0.920000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      27.000000\n      33.890600\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      50%\n      37.000000\n      67.950000\n      0.000000\n      0.000000\n      1.000000\n    \n    \n      75%\n      49.000000\n      107.043750\n      1.000000\n      1.000000\n      1.000000\n    \n    \n      max\n      80.000000\n      512.329200\n      4.000000\n      3.000000\n      1.000000\n    \n  \n\n\n\n\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize =(12,3))\nfig1 = sns.countplot(x=\"Pclass\", data=data, hue='Survived', palette=\"Greens_d\", ax=ax1);\nplt.legend([\"Perished\", \"Survived\"])\nfig2 = sns.barplot(x=\"Pclass\", y=\"Survived\", data=data, ax=ax2);\nplt.suptitle(\"Survival rate by Pclass\", size=12)\n\n<matplotlib.text.Text>\n\n\n\n\n\nMean Fare of Upper Class was 88 dollars, Middle Class was 21.47 dollars and Lower Class was 13.22 dollars. Most survivors were from upper class(mean survival = 0.65), followed by middle(mean survival = 0.48) and then lower(mean survival = 0.24). Most of the passengers who did not survive belonged to the lower class Pclass shows linear relation to survival probability. There could be several reasons for that. People in upper classes could have boarded lifeboats before the lower classes, it also fits well with the correlation to fare in the prev plot.\n\n\n‚ÄòSurvived‚Äô by Embarked\n\nsns.countplot(x=\"Embarked\", data=data, hue='Survived', palette=\"Greens_d\");\nsns.countplot(x=\"Embarked\", data=data, hue='Pclass', palette=\"Reds_d\");\nplt.suptitle(\"Valuecounts of Survivors by Pclass\", size=12)\nplt.suptitle(\"Valuecounts of Female vs Male survivors\", size=12)\nlabel = [\"Perished\", \"Survived\", \"Lower\", \"Upper\", \"Middle\"]\nplt.legend(label, loc='upper center')\n\n<matplotlib.legend.Legend>\n\n\n\n\n\nMost of the passengers were in lower Pclass and embarked from ‚ÄòS‚Äô followed by ‚ÄòC‚Äô and ‚ÄòQ‚Äô. Does not show much relationship to survival rate\n\n\n‚ÄòSurvived‚Äô by Sex\n\ndata.groupby('Sex').describe()\n\n\n\n\n  \n    \n      \n      \n      Age\n      Fare\n      Parch\n      SibSp\n      Survived\n    \n    \n      Sex\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      female\n      count\n      259.000000\n      259.000000\n      259.000000\n      259.000000\n      259.000000\n    \n    \n      mean\n      27.745174\n      47.332433\n      0.714286\n      0.644788\n      0.752896\n    \n    \n      std\n      13.989760\n      61.517487\n      1.069045\n      0.930367\n      0.432163\n    \n    \n      min\n      0.750000\n      6.750000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      18.000000\n      13.000000\n      0.000000\n      0.000000\n      1.000000\n    \n    \n      50%\n      27.000000\n      26.000000\n      0.000000\n      0.000000\n      1.000000\n    \n    \n      75%\n      36.000000\n      56.964600\n      1.000000\n      1.000000\n      1.000000\n    \n    \n      max\n      63.000000\n      512.329200\n      6.000000\n      5.000000\n      1.000000\n    \n    \n      male\n      count\n      453.000000\n      453.000000\n      453.000000\n      453.000000\n      453.000000\n    \n    \n      mean\n      30.726645\n      27.268836\n      0.271523\n      0.439294\n      0.205298\n    \n    \n      std\n      14.678201\n      45.841889\n      0.651076\n      0.923609\n      0.404366\n    \n    \n      min\n      0.420000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      25%\n      21.000000\n      7.895800\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      50%\n      29.000000\n      13.000000\n      0.000000\n      0.000000\n      0.000000\n    \n    \n      75%\n      39.000000\n      28.500000\n      0.000000\n      1.000000\n      0.000000\n    \n    \n      max\n      80.000000\n      512.329200\n      5.000000\n      5.000000\n      1.000000\n    \n  \n\n\n\n\n\nsns.countplot(x=\"Sex\", data=data, hue='Survived', palette=\"Greens_d\");\nplt.suptitle(\"Valuecounts of Female vs Male survivors\", size=12)\nlabel = [\"Perished\", \"Survived\"]\nplt.legend(label, loc='upper center')\n\n<matplotlib.legend.Legend>\n\n\n\n\n\nMean age of females who boarded the ship was 27-28 years and males was 30-31 years. There were 259 females and 453 males, more number of females(mean survival = 0.75) survived than males(mean survival = 0.20)\nFor the purpose of this analysis, I will pick Sex, Pclass and Age as major factors and investigate them further. The reason why I am picking them is because they show correlation with survival rate. Survival showed correlation to Fare as well but since the fare is represented by Pclass, I picked Pclass over Fare. Although other factors also affect survival, but I will focus on these three for this exercise\n\n\n\nUnderstanding Pclass and Sex as a factor\n\nsns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=data);\nplt.suptitle(\"Mean Survival rate of Female vs Male survivors by Pclass\", size=12)\n\n<matplotlib.text.Text>\n\n\n\n\n\nThere were 314 females and 577 males, mean for female survivors(mean=0.74,std= 0.44) is more than males(mean=0.19,std= 0.39) across all Pclasses, Survival has linear relationship with class. Females had high probability of survival in both Upper and Middle class. Only upper class males had high probability of survival, which was lower than low class female passengers however\n\n\nUnderstanding Age as a factor\n\nprint(grouped_by_factors(data,'Age').head())\nprint(grouped_by_factors(data,'Age').tail())\n\n              Fare  Parch  SibSp  Survived\nAge                                       \n0.42 count  1.0000    1.0    1.0       1.0\n     mean   8.5167    1.0    0.0       1.0\n     std       NaN    NaN    NaN       NaN\n     min    8.5167    1.0    0.0       1.0\n     25%    8.5167    1.0    0.0       1.0\n          Fare  Parch  SibSp  Survived\nAge                                   \n80.0 min  30.0    0.0    0.0       1.0\n     25%  30.0    0.0    0.0       1.0\n     50%  30.0    0.0    0.0       1.0\n     75%  30.0    0.0    0.0       1.0\n     max  30.0    0.0    0.0       1.0\n\n\n\nsurv_age = data[data['Survived'] == 1]\ng = surv_age['Age'].plot(kind='hist', figsize=[12,6], alpha=.8)\nnotsurv_age = data[data['Survived'] == 0]\nnotsurv_age['Age'].plot(kind='hist', figsize=[12,6], alpha=.4)\nplt.legend(label)\ng.set(xlabel='Age')\nplt.suptitle(\"Distribution of Age for Perished and Survived\", size=12)\n\n<matplotlib.text.Text>\n\n\n\n\n\nAge of the passengers ranged from 0 to 80 years. Green bar is for passengers who did not survive and the blue is for those who survived. The distribution is almost normal distribution with similar shape and mode around 20 years. Below is the correlation for Age vs mean survived, it shows slight negative correlation with pearson‚Äôr value of -0.082\n\nCorrelation of ‚ÄòSurvived‚Äô with Age\n\nsns.set(style=\"darkgrid\", color_codes=True)\ng = sns.jointplot(\"Age\", \"Survived\", data=data, kind=\"reg\",color=\"g\", size=7)\nplt.subplots_adjust(top=0.95)\nplt.suptitle(\"Distribution of Age for Perished and Survived\", size=12)\n\n<matplotlib.text.Text>\n\n\n\n\n\n\n\nCorrelation of ‚ÄòSurvived‚Äô with Age and Sex\n\ng = sns.lmplot(x=\"Age\", y=\"Survived\", col=\"Sex\", hue=\"Sex\", data=data, y_jitter=.02, logistic=True)\nplt.subplots_adjust(top=0.9)\nplt.suptitle(\"Correlation of Age with Survival Rate\", size=12)\n\n<matplotlib.text.Text>\n\n\n\n\n\nSurvival probability was higher for Younger Men and Older Women, Side by side comparison of males and females by age further supports that\n\ng = sns.factorplot(x=\"Survived\", y=\"Age\", hue=\"Sex\", data=data, size=6, kind=\"bar\", palette=\"muted\")\ng.despine(left=True)\nplt.subplots_adjust(top=0.95)\nplt.suptitle(\"Survived vs Age for males and females\", size=12)\ng.set_xticklabels(['Perished', 'Survived'])\n\n<seaborn.axisgrid.FacetGrid>"
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html#hypothesis-testing",
    "href": "posts/qmd_titanic/titanic.html#hypothesis-testing",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "Hypothesis testing",
    "text": "Hypothesis testing\nI have a hypothesis that passengers that are lower in age(<15 years) had greater chance of survival than females.\nNull Hypothesis would be that the difference in chances of survival of passengers greater or lower than 15 years is not significant and alternate would be that it is significant.\n                        H0: ¬µchild = ¬µfemale at Œ± = 0.05, \n                        HA: ¬µchild ‚â† ¬µfemale at Œ± = 0.05, where Œ± is the t-critical at which the probability is .05 and ¬µchild and ¬µfemale are population means for the two groups.\n\n#Children under 15yrs of age\ndata_children = data[data['Age'] <= 15]\n\n\n#Females of age greater than 15 years\ndata_female = data[(data['Sex'] == 'female') & (data['Age'] > 15)]\n\n\nscipy.stats.ttest_ind(data_children['Survived'], data_female['Survived'], axis=0, equal_var=False, nan_policy='propagate')\n\nTtest_indResult(statistic=-2.978953154108325, pvalue=0.0034528377861817636)\n\n\n\nSince p value is low, the difference in mean survival is significant for females vs.¬†children. Negative t-statistic shows that the mean survival of females is more than that of children"
  },
  {
    "objectID": "posts/qmd_titanic/titanic.html#conclusions",
    "href": "posts/qmd_titanic/titanic.html#conclusions",
    "title": "Titanic dataset analysis using Pandas and Numpy",
    "section": "Conclusions",
    "text": "Conclusions\nIn Conclusion with the given dataset, Most contributing factors are ‚ÄòSex‚Äô and Pclass. Women had the most probability of survival in general. Survival rate is positively correlated to Fare and negatively correlated to Age which means younger people and those who paid more had higher chances of surviving. Females had positive correlation of survival with age and Males had negative correlation. Most survivors were from Upper Pclass followed by medium and lower class passengers. Most of the passengers in lower class perished. Passengers with any parent/child/sibling or spouse had higher chance at survival than the ones that did not. The analysis has following limitations: Omitted rows with missing values for ‚ÄòAge‚Äô and ‚Äòemabarked‚Äô Did not draw conclusions based on ‚ÄòName‚Äô column dropped ‚ÄòCabin‚Äô and ‚ÄòPassengerId‚Äô during data wrangling phase The data set is limited, the complete dataset should contain data for 1500 passengers"
  },
  {
    "objectID": "posts/sample_ipynb/hello.html",
    "href": "posts/sample_ipynb/hello.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure¬†1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure¬†1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/when_to_water/index.html",
    "href": "posts/when_to_water/index.html",
    "title": "Can AI decide when to water crops?",
    "section": "",
    "text": "In Texas, 2022 was one of the driest years on record. The article in general wishes to tackle the water scarcity problems in agriculture. For that, Texas A&M AgriLife Research and IBM are collaborating to streamline a new low-cost app, similar to Liquid prep, to help farmers determine the optimal time to water their crops. The app, called ‚ÄúWhen to Water,‚Äù combines data from various sources, including soil sensors, crop types, and weather forecasts, to provide customized irrigation recommendations to farmers. The collaboration aims to improve the accuracy and speed of data collection, analysis, and transmission, ultimately helping farmers make more informed decisions about irrigation management."
  },
  {
    "objectID": "series-gha.html",
    "href": "series-gha.html",
    "title": "GitHub Actions Series: Making awesome automations",
    "section": "",
    "text": "Here you can find a series of posts about GitHub Actions, which are complementary material for my lightning talk at the RStudio Conference - rstudio::conf 2022."
  },
  {
    "objectID": "series-gha.html#posts-in-english",
    "href": "series-gha.html#posts-in-english",
    "title": "GitHub Actions Series: Making awesome automations",
    "section": "Posts in English",
    "text": "Posts in English\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "series-gha.html#posts-en-fran√ßais",
    "href": "series-gha.html#posts-en-fran√ßais",
    "title": "GitHub Actions Series: Making awesome automations",
    "section": "Posts en fran√ßais",
    "text": "Posts en fran√ßais\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Homepage",
    "section": "",
    "text": "See all/Voir tout"
  },
  {
    "objectID": "test.html#posts-in-english",
    "href": "test.html#posts-in-english",
    "title": "Homepage",
    "section": "Posts in English",
    "text": "Posts in English\n\n\n\n See all posts in English"
  },
  {
    "objectID": "test.html#posts-en-fran√ßais",
    "href": "test.html#posts-en-fran√ßais",
    "title": "Homepage",
    "section": "Posts en fran√ßais",
    "text": "Posts en fran√ßais\n\n\n\n Voir posts en fran√ßais"
  }
]